; 
; Mnemonics:
; 
; reg/mem8   Byte GPR register or memory address
; reg/mem16  Word GPR register or memory address
; reg/mem32  Dword GPR register or memory address
; reg/mem64  Qword GPR register or memory address
; reg/mem128 Oword GPR register or memory address
; mem8       Byte memory address
; mem16      Word memory address
; mem32      dword memory address
; mem64      qword memory address
; mem128     oword memory address
; reg8       Byte GPR register
; reg16      Word GPR register
; reg32      Dword GPR register
; reg64      Qword GPR register
; reg128     Oword GPR register
; imm8       Immediate byte
; imm16      Immediate word
; imm32      Immediate dword
; imm64      Immediate qword
; imm128     Immediate oword
; imm8a      Array of immediate bytes  (Can be an ASCII string or a UTF-8 string)
; imm16a     Array of immediate words  (Can be a UTF-16 string)
; imm32a     Array of immediate dwords (Can be a UTF-32 string)
; imm64a     Array of immediate qwords
; imm128a    Array of immediate owords
; label      A label name
; string     A string (Can be an ASCII string or a UTF-8 string)

; 
; Opcode syntax:
; 
; iab, iaw, iad, iaq, iao      Specifies an immediate-operand array value, see "ib, iw, id, iq, io" for more information.
; resb, resw, resd, resq, reso Specifies an array of zeros either by bytes (resb), two bytes (resw), four bytes(resd), eight bytes(resq), sixteen bytes(reso).
; bits                         Specifies what bits to assemble for future instructions.
; org                          Specifies the origin point for future instructions.
; global                       Specifies a label to be global and can be seen from other files.
; extern                       Specifies a label to be external and can be found in another file.
; section                      Specifies what section to put future instructions into.
; /digit                       Indicates that the ModRM byte specifies only one register or memory (r/m) operand.
;                                The digit is specified by the ModRM reg field and is used as an instruction opcode extension.
;                                Valid values range from 0 to 7.
; /r                           Indicates that the ModRM byte specifies both a register operand and a reg/mem (register or memory) operand.
; ib, iw, id, iq, io           Specifies an immediate-operand value. The opcode determines wether the value is signed or unsigned.
;                                The value following the opcode, ModRM, or SIB byte is either one byte (ib), two bytes (iw), or four bytes (id).
;                                Word and doubleword values start with the low-order byte

; 
; Ini section:
; 
; [Instruction."Bits Mnemonics"]            | REQ 'Instruction' is the name of the instruction.
;                                           | REQ 'Bits' is a list of the bits that can assemble this instruction separated by forward slashes (/).
;                                           | REQ 'Mnemonics' are all the operands to the instruction separated by one or more spaces.
; Opcode = "Opcode"                         | REQ the syntax for the instruction.
; Instruction = "ReadableMnemonics"         | OPT all the operands in a readable manner spearated by one or more spaces.
; OperandSizeOverride = true/false          | OPT tells wether or not to prepend 66 to the opcode.
; AddressSizeOverride = true/false          | OPT tells wether or not to prepend 67 to the opcode.
; SegmentOverride = CS/DS/ES/FS/GS/SS/false | OPT tells which segment override to prepend to the opcode.
; Lock = true/false                         | OPT tells wether or not to prepend F0 to the opcode.
; Repeat = 0/1/false                        | OPT tells which repeat to prepend 0 = F2, 1 = F3 to the opcode.
; VEX = 0xC4/0xC5/false                     | OPT tells which VEX prefix to prepend to the opcode.
; XOP = true/false                          | OPT tells wether to prepend 8F to the opcode.
; [.REX]                                    | OPT REX prefix to prepend to the opcode.
; W = 0/1                                   | OPT tells which state the W bit is for the REX prefix.
; R = 0/1                                   | OPT tells which state the R bit is for the REX prefix.
; X = 0/1                                   | OPT tells which state the X bit is for the REX prefix.
; B = 0/1                                   | OPT tells which state the B bit is for the REX prefix.
; [..RXBmap_select]                         | OPT RXBmap_select byte override for use with VEX or XOP
; R = 0/1                                   | OPT tells which state the R bit is for the byte
; X = 0/1                                   | OPT tells which state the X bit is for the byte
; B = 0/1                                   | OPT tells which state the B bit is for the byte
; map_select = 0 to 15                      | OPT tells which state the map_select bits is for the byte
; [..WvvvvLpp]                              | OPT WvvvvLpp byte override for use with VEX or XOP
; W = 0/1                                   | OPT tells which state the W bit is for the byte
; vvvv = 0 to 15                            | OPT tells which state the vvvv bits is for the byte
; L = 0/1                                   | OPT tells which state the L bit is for the byte
; pp = 0 to 3                               | OPT tells which state tht pp bits is for the byte
; [..RvvvvLpp]                              | OPT RvvvvLpp byte override for use with VEX
; R = 0/1                                   | OPT tells which state the R bit is for the byte
; vvvv = 0 to 15                            | OPT tells which state the vvvv bits is for the byte
; L = 0/1                                   | OPT tells which state the L bit is for the byte
; pp = 0 to 3                               | OPT tells which state the pp bits is for the byte

[DB."16/32/64 imm8a"]
Opcode = "iab"
Instruction = "values"

[DW."16/32/64 imm16a"]
Opcode = "iaw"
Instruction = "values"

[DD."16/32/64 imm32a"]
Opcode = "iad"
Instruction = "values"

[DQ."16/32/64 imm64a"]
Opcode = "iaq"
Instruction = "values"

[RESB."16/32/64 imm64"]
Opcode = "resb"
Instruction = "bytes"

[RESW."16/32/64 imm64"]
Opcode = "resw"
Instruction = "bytes"

[RESD."16/32/64 imm64"]
Opcode = "resd"
Instruction = "bytes"

[RESQ."16/32/64 imm64"]
Opcode = "resq"
Instruction = "bytes"

[BITS."16/32/64 imm16"]
Opcode = "bits"
Instruction = "bits"

[ORG."16/32/64 imm64"]
Opcode = "org"
Instruction = "origin"

[GLOBAL."16/32/64 label"]
Opcode = "global"
Instruction = "label"

[EXTERN."16/32/64 string"]
Opcode = "extern"
Instruction = "label"

[SECTION."16/32/64 string"]
Opcode = "section"
Instruction = "section"

[AAA."16/32"]
Opcode = "37"

[AAD."16/32"]
Opcode = "D5 0A"

[AAD."16/32 imm8"]
Opcode = "D5 ib"
Instruction = "base"

[AAM."16/32"]
Opcode = "D4 0A"

[AAM."16/32 imm8"]
Opcode = "D4 ib"
Instruction = "base"

[AAS."16/32"]
Opcode = "3F"

[ADC."16/32/64 AL imm8"]
Opcode = "14 ib"
Instruction = "dest src"

[ADC."16 AX imm16"]
Opcode = "15 iw"
Instruction = "dest src"

[ADC."32/64 AX imm16"]
Opcode = "15 iw"
Instruction = "dest src"
OperandSizeOverride = true

[ADC."16 EAX imm32"]
Opcode = "15 id"
Instruction = "dest src"
OperandSizeOverride = true

[ADC."32/64 EAX imm32"]
Opcode = "15 id"
Instruction = "dest src"

[ADC."64 RAX imm32"]
Opcode = "15 id"
Instruction = "dest src"

[ADC."16/32/64 reg/mem8 imm8"]
Opcode = "80 /2 ib"
Instruction = "dest src"

[ADC."16 reg/mem16 imm8"]
Opcode = "83 /2 ib"
Instruction = "dest src"

[ADC."32/64 reg/mem16 imm8"]
Opcode = "83 /2 ib"
Instruction = "dest src"
OperandSizeOverride = true

[ADC."32/64 reg/mem32 imm8"]
Opcode = "83 /2 ib"
Instruction = "dest src"

[ADC."64 reg/mem64 imm8"]
Opcode = "83 /2 ib"
Instruction = "dest src"
[.REX]
W = 1

[ADC."16 reg/mem16 imm16"]
Opcode = "81 /2 iw"
Instruction = "dest src"

[ADC."32/64 reg/mem16 imm16"]
Opcode = "81 /2 iw"
Instruction = "dest src"
OperandSizeOverride = true

[ADC."32/64 reg/mem32 imm32"]
Opcode = "81 /2 id"
Instruction = "dest src"

[ADC."64 reg/mem64 imm32"]
Opcode = "81 /2 id"
Instruction = "dest src"
[.REX]
W = 1

[ADC."16/32/64 reg/mem8 reg8"]
Opcode = "10 /r"
Instruction = "dest src"

[ADC."16 reg/mem16 reg16"]
Opcode = "11 /r"
Instruction = "dest src"

[ADC."32/64 reg/mem16 reg16"]
Opcode = "11 /r"
Instruction = "dest src"
OperandSizeOverride = true

[ADC."32/64 reg/mem32 reg32"]
Opcode = "11 /r"
Instruction = "dest src"

[ADC."64 reg/mem64 reg64"]
Opcode = "11 /r"
Instruction = "dest src"
[.REX]
W = 1

[ADC."16/32/64 reg8 reg/mem8"]
Opcode = "12 /r"
Instruction = "dest src"

[ADC."16 reg16 reg/mem16"]
Opcode = "13 /r"
Instruction = "dest src"

[ADC."32/64 reg16 reg/mem16"]
Opcode = "13 /r"
Instruction = "dest src"
OperandSizeOverride = true

[ADC."32/64 reg32 reg/mem32"]
Opcode = "13 /r"
Instruction = "dest src"

[ADC."64 reg64 reg/mem64"]
Opcode = "13 /r"
Instruction = "dest src"
[.REX]
W = 1

[ADCX."32/64 reg32 reg/mem32"]
Opcode = "0F 38 F6 /r"
Instruction = "dest src"
OperandSizeOverride = true

[ADCX."64 reg64 reg/mem64"]
Opcode = "0F 38 F6 /r"
Instruction = "dest src"
OperandSizeOverride = true
[.REX]
W = 1

[ADD."16/32/64 AL imm8"]
Opcode = "04 ib"
Instruction = "dest src"

[ADD."16 AX imm16"]
Opcode = "05 iw"
Instruction = "dest src"

[ADD."32/64 AX imm16"]
Opcode = "05 iw"
Instruction = "dest src"
OperandSizeOverride = true

[ADD."16 EAX imm32"]
Opcode = "05 id"
Instruction = "dest src"
OperandSizeOverride = true

[ADD."32/64 EAX imm32"]
Opcode = "05 id"
Instruction = "dest src"

[ADD."64 RAX imm32"]
Opcode = "05 id"
Instruction = "dest src"

[ADD."16/32/64 reg/mem8 imm8"]
Opcode = "80 /0 ib"
Instruction = "dest src"

[ADD."16 reg/mem16 imm8"]
Opcode = "83 /0 ib"
Instruction = "dest src"

[ADD."32/64 reg/mem16 imm8"]
Opcode = "83 /0 ib"
Instruction = "dest src"
OperandSizeOverride = true

[ADD."32/64 reg/mem32 imm8"]
Opcode = "83 /0 ib"
Instruction = "dest src"

[ADD."64 reg/mem64 imm8"]
Opcode = "83 /0 ib"
Instruction = "dest src"
[.REX]
W = 1

[ADD."16 reg/mem16 imm16"]
Opcode = "81 /0 iw"
Instruction = "dest src"

[ADD."32/64 reg/mem16 imm16"]
Opcode = "81 /0 iw"
Instruction = "dest src"
OperandSizeOverride = true

[ADD."32/64 reg/mem32 imm32"]
Opcode = "81 /0 id"
Instruction = "dest src"

[ADD."64 reg/mem64 imm32"]
Opcode = "81 /0 id"
Instruction = "dest src"
[.REX]
W = 1

[ADD."16/32/64 reg/mem8 reg8"]
Opcode = "00 /r"
Instruction = "dest src"

[ADD."16 reg/mem16 reg16"]
Instruction = "dest src"
Opcode = "01 /r"

[ADD."32/64 reg/mem16 reg16"]
Opcode = "01 /r"
Instruction = "dest src"
OperandSizeOverride = true

[ADD."32/64 reg/mem32 reg32"]
Opcode = "01 /r"
Instruction = "dest src"

[ADD."64 reg/mem64 reg64"]
Opcode = "01 /r"
Instruction = "dest src"
[.REX]
W = 1

[ADD."16/32/64 reg8 reg/mem8"]
Opcode = "02 /r"
Instruction = "dest src"

[ADD."16 reg16 reg/mem16"]
Opcode = "03 /r"
Instruction = "dest src"

[ADD."32/64 reg16 reg/mem16"]
Opcode = "03 /r"
Instruction = "dest src"
OperandSizeOverride = true

[ADD."32/64 reg32 reg/mem32"]
Opcode = "03 /r"
Instruction = "dest src"

[ADD."64 reg64 reg/mem64"]
Opcode = "03 /r"
Instruction = "dest src"
[.REX]
W = 1

[ADOX."32/64 reg32 reg/mem32"]
Opcode = "0F 38 F6 /r"
Instruction = "dest src"
Repeat = 1

[ADOX."64 reg64 reg/mem64"]
Opcode = "0F 38 F6 /r"
Instruction = "dest src"
Repeat = 1
[.REX]
W = 1

[AND."16/32/64 AL imm8"]
Opcode = "24 ib"
Instruction = "dest src"

[AND."16 AX imm16"]
Opcode = "25 iw"
Instruction = "dest src"

[AND."32/64 AX imm16"]
Opcode = "25 iw"
Instruction = "dest src"
OperandSizeOverride = true

[AND."16 EAX imm32"]
Opcode = "25 id"
Instruction = "dest src"
OperandSizeOverride = true

[AND."32/64 EAX imm32"]
Opcode = "25 id"
Instruction = "dest src"

[AND."64 RAX imm32"]
Opcode = "25 id"
Instruction = "dest src"

[AND."16/32/64 reg/mem8 imm8"]
Opcode = "80 /4 ib"
Instruction = "dest src"

[AND."16 reg/mem16 imm16"]
Opcode = "81 /4 iw"
Instruction = "dest src"

[AND."32/64 reg/mem16 imm16"]
Opcode = "81 /4 iw"
Instruction = "dest src"
OperandSizeOverride = true

[AND."32/64 reg/mem32 imm32"]
Opcode = "81 /4 id"
Instruction = "dest src"

[AND."64 reg/mem64 imm32"]
Opcode = "81 /4 id"
Instruction = "dest src"
[.REX]
W = 1

[AND."16/32/64 reg/mem8 reg8"]
Opcode = "20 /r"
Instruction = "dest src"

[AND."16 reg/mem16 reg16"]
Opcode = "21 /r"
Instruction = "dest src"

[AND."32/64 reg/mem16 reg16"]
Opcode = "21 /r"
Instruction = "dest src"
OperandSizeOverride = true

[AND."32/64 reg/mem32 reg32"]
Opcode = "21 /r"
Instruction = "dest src"

[AND."64 reg/mem64 reg64"]
Opcode = "21 /r"
Instruction = "dest src"
[.REX]
W = 1

[AND."16/32/64 reg8 reg/mem8"]
Opcode = "22 /r"
Instruction = "dest src"

[AND."16 reg16 reg/mem16"]
Opcode = "23 /r"
Instruction = "dest src"

[AND."32/64 reg16 reg/mem16"]
Opcode = "23 /r"
Instruction = "dest src"
OperandSizeOverride = true

[AND."32/64 reg32 reg/mem32"]
Opcode = "23 /r"
Instruction = "dest src"

[AND."64 reg64 reg/mem64"]
Opcode = "23 /r"
Instruction = "dest src"
[.REX]
W = 1

[ANDN."32/64 reg32 reg32 reg/mem32"]
Opcode = "F2 /r"
Instruction = "dest src1 src2"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "src1"
L = 0
pp = 0

[ANDN."64 reg64 reg64 reg/mem64"]
Opcode = "F2 /r"
Instruction = "dest src1 src2"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "src1"
L = 0
pp = 0

[BEXTR."32/64 reg32 reg/mem32 reg32"]
Opcode = "F7 /r"
Instruction = "dest src cntl"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "cntl"
L = 0
pp = 0

[BEXTR."64 reg64 reg/mem64 reg64"]
Opcode = "F7 /r"
Instruction = "dest src cntl"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "cntl"
L = 0
pp = 0

[BEXTR."32/64 reg32 reg/mem32 imm32"]
Opcode = "10 /r id"
Instruction = "dest src cntl"
XOP = true
[.RXBmap_select]
map_select = 0x0A
[..WvvvvLpp]
W = 0
vvvv = 0b1111
L = 0
pp = 0

[BEXTR."64 reg64 reg/mem64 imm32"]
Opcode = "10 /r id"
Instruction = "dest src cntl"
XOP = true
[.RXBmap_select]
map_select = 0x0A
[..WvvvvLpp]
W = 1
vvvv = 0b1111
L = 0
pp = 0

[BLCFILL."32/64 reg32 reg/mem32"]
Opcode = "01 /1"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
pp = 0

[BLCFILL."64 reg64 reg/mem64"]
Opcode = "01 /1"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
pp = 0

[BLCI."32/64 reg32 reg/mem32"]
Opcode = "02 /6"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
pp = 0

[BLCI."64 reg64 reg/mem64"]
Opcode = "02 /6"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
pp = 0

[BLCIC."32/64 reg32 reg/mem32"]
Opcode = "01 /5"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
pp = 0

[BLCIC."64 reg64 reg/mem64"]
Opcode = "01 /5"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
pp = 0

[BLCMSK."32/64 reg32 reg/mem32"]
Opcode = "02 /1"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
pp = 0

[BLCMSK."64 reg64 reg/mem64"]
Opcode = "02 /1"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
pp = 0

[BLCS."32/64 reg32 reg/mem32"]
Opcode = "01 /3"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
pp = 0

[BLCS."64 reg64 reg/mem64"]
Opcode = "01 /3"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
pp = 0

[BLSFILL."32/64 reg32 reg/mem32"]
Opcode = "01 /2"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
pp = 0

[BLSFILL."64 reg64 reg/mem64"]
Opcode = "01 /2"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
pp = 0

[BLSI."32/64 reg32 reg/mem32"]
Opcode = "F3 /3"
Instruction = "dest src"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
pp = 0

[BLSI."64 reg64 reg/mem64"]
Opcode = "F3 /3"
Instruction = "dest src"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
pp = 0

[BLSIC."32/64 reg32 reg/mem32"]
Opcode = "01 /6"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
pp = 0

[BLSIC."64 reg64 reg/mem64"]
Opcode = "01 /6"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
pp = 0

[BLSMSK."32/64 reg32 reg/mem32"]
Opcode = "F3 /2"
Instruction = "dest src"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
pp = 0

[BLSMSK."64 reg64 reg/mem64"]
Opcode = "F3 /2"
Instruction = "dest src"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
pp = 0

[BLSR."32/64 reg32 reg/mem32"]
Opcode = "F3 /1"
Instruction = "dest src"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
pp = 0

[BLSC."64 reg64 reg/mem64"]
Opcode = "F3 /1"
Instruction = "dest src"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
pp = 0

[BOUND."16 reg16 mem16"]
Opcode = "62 /r"
Instruction = "index bounds"

[BOUND."32 reg16 mem32"]
Opcode = "62 /r"
Instruction = "index bounds"
OperandSizeOverride = true

[BOUND."32 reg32 mem32"]
Opcode = "62 /r"
Instruction = "index bounds"

[BSF."16 reg16 reg/mem16"]
Opcode = "0F BC /r"
Instruction = "dest src"

[BSF."32/64 reg16 reg/mem16"]
Opcode = "0F BC /r"
Instruction = "dest src"
OperandSizeOverride = true

[BSF."32/64 reg32 reg/mem32"]
Opcode = "0F BC /r"
Instruction = "dest src"

[BSF."64 reg64 reg/mem64"]
Opcode = "0F BC /r"
Instruction = "dest src"
[.REX]
W = 1

[BSR."16 reg16 reg/mem16"]
Opcode = "0F BD /r"
Instruction = "dest src"

[BSR."32/64 reg16 reg/mem16"]
Opcode = "0F BD /r"
Instruction = "dest src"
OperandSizeOverride = true

[BSR."32/64 reg32 reg/mem32"]
Opcode = "0F BD /r"
Instruction = "dest src"

[BSR."64 reg64 reg/mem64"]
Opcode = "0F BD /r"
Instruction = "dest src"
[.REX]
W = 1

[BSWAP."32/64 reg32"]
Opcode = "0F C8 +rd"
Instruction = "register"

[BSWAP."64 reg64"]
Opcode = "0F C8 +rq"
Instruction = "register"

[BT."16 reg/mem16 reg16"]
Opcode = "0F A3 /r"
Instruction = "src bit"

[BT."32/64 reg/mem16 reg16"]
Opcode = "0F A3 /r"
Instruction = "src bit"
OperandSizeOverride = true

[BT."32/64 reg/mem32 reg32"]
Opcode = "0F A3 /r"
Instruction = "src bit"

[BT."64 reg/mem64 reg64"]
Opcode = "0F A3 /r"
Instruction = "src bit"
[.REX]
W = 1

[BT."16 reg/mem16 imm8"]
Opcode = "0F BA /4 ib"
Instruction = "src bit"

[BT."32/64 reg/mem16 imm8"]
Opcode = "0F BA /4 ib"
Instruction = "src bit"
OperandSizeOverride = true

[BT."32/64 reg/mem32 imm8"]
Opcode = "0F BA /4 ib"
Instruction = "src bit"

[BT."64 reg/mem64 imm8"]
Opcode = "0F BA /4 ib"
Instruction = "src bit"
[.REX]
W = 1

[BTC."16 reg/mem16 reg16"]
Opcode = "0F BB /r"
Instruction = "src bit"

[BTC."32/64 reg/mem16 reg16"]
Opcode = "0F BB /r"
Instruction = "src bit"
OperandSizeOverride = true

[BTC."32/64 reg/mem32 reg32"]
Opcode = "0F BB /r"
Instruction = "src bit"

[BTC."64 reg/mem64 reg64"]
Opcode = "0F BB /r"
Instruction = "src bit"
[.REX]
W = 1

[BTC."16 reg/mem16 imm8"]
Opcode = "0F BA /7 ib"
Instruction = "src bit"

[BTC."32/64 reg/mem16 imm8"]
Opcode = "0F BA /7 ib"
Instruction = "src bit"
OperandSizeOverride = true

[BTC."32/64 reg/mem32 imm8"]
Opcode = "0F BA /7 ib"
Instruction = "src bit"

[BTC."64 reg/mem64 imm8"]
Opcode = "0F BA /7 ib"
Instruction = "src bit"
[.REX]
W = 1

[BTR."16 reg/mem16 reg16"]
Opcode = "0F B3 /r"
Instruction = "src bit"

[BTR."32/64 reg/mem16 reg16"]
Opcode = "0F B3 /r"
Instruction = "src bit"
OperandSizeOverride = true

[BTR."32/64 reg/mem32 reg32"]
Opcode = "0F B3 /r"
Instruction = "src bit"

[BTR."64 reg/mem64 reg64"]
Opcode = "0F B3 /r"
Instruction = "src bit"
[.REX]
W = 1

[BTR."16 reg/mem16 imm8"]
Opcode = "0F BA /6 ib"
Instruction = "src bit"

[BTR."32/64 reg/mem16 imm8"]
Opcode = "0F BA /6 ib"
Instruction = "src bit"
OperandSizeOverride = true

[BTR."32/64 reg/mem32 imm8"]
Opcode = "0F BA /6 ib"
Instruction = "src bit"

[BTR."64 reg/mem64 imm8"]
Opcode = "0F BA /6 ib"
Instruction = "src bit"
[.REX]
W = 1

[BTS."16 reg/mem16 reg16"]
Opcode = "0F AB /r"
Instruction = "src bit"

[BTS."32/64 reg/mem16 reg16"]
Opcode = "0F AB /r"
Instruction = "src bit"
OperandSizeOverride = true

[BTS."32/64 reg/mem32 reg32"]
Opcode = "0F AB /r"
Instruction = "src bit"

[BTS."64 reg/mem64 reg64"]
Opcode = "0F AB /r"
Instruction = "src bit"
[.REX]
W = 1

[BTS."16 reg/mem16 imm8"]
Opcode = "0F BA /5 ib"
Instruction = "src bit"

[BTS."32/64 reg/mem16 imm8"]
Opcode = "0F BA /5 ib"
Instruction = "src bit"
OperandSizeOverride = true

[BTS."32/64 reg/mem32 imm8"]
Opcode = "0F BA /5 ib"
Instruction = "src bit"

[BTS."64 reg/mem64 imm8"]
Opcode = "0F BA /5 ib"
Instruction = "src bit"
[.REX]
W = 1

[BZHI."32/64 reg32 reg/mem32 reg32"]
Opcode = "F5 /r"
Instruction = "dest src index"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "index"
L = 0
pp = 0

[BZHI."64 reg64 reg/mem64 reg64"]
Opcode = "F5 /r"
Instruction = "dest src index"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "index"
L = 0
pp = 0

[CALL."16 rel16off"]
Opcode = "E8 iw"
Instruction = "target"

[CALL."32/64 rel32off"]
Opcode = "E8 id"
Instruction = "target"

[CALL."16 reg/mem16"]
Opcode = "FF /2"
Instruction = "target"

[CALL."32 reg/mem16"]
Opcode = "FF /2"
Instruction = "target"
OperandSizeOverride = true

[CALL."32 reg/mem32"]
Opcode = "FF /2"
Instruction = "target"

[CALL."64 reg/mem64"]
Opcode = "FF /2"
Instruction = "target"
OperandSizeOverride = true

[CALL."16 pntr16:16"]
Opcode = "9A cd"
Instruction = "target"

[CALL."32 pntr16:32"]
Opcode = "9A cp"
Instruction = "target"

[CALL."16 mem16:16"]
Opcode = "FF /3"
Instruction = "target"

[CALL."32/64 mem16:32"]
Opcode = "FF /3"
Instruction = "target"

[CBW."16"]
Opcode = "98"

[CBW."32/64"]
Opcode = "98"
OperandSizeOverride = true

[CWDE."32/64"]
Opcode = "98"

[CDQE."64"]
Opcode = "98"
[.REX]
W = 1

[CWD."16"]
Opcode = "99"

[CWD."32/64"]
Opcode = "99"
OperandSizeOverride = true

[CDQ."32/64"]
Opcode = "99"

[CQO."64"]
Opcode = "99"
[.REX]
W = 1

[CLC."16/32/64"]
Opcode = "F8"

[CLD."16/32/64"]
Opcode = "FC"

[CLFLUSH."16/32/64 mem8"]
Opcode = "0F AE /7"
Instruction = "address"

[CLFLUSHOPT."16/32/64 mem8"]
Opcode = "0F AE /7"
Instruction = "address"
OperandSizeOverride = true

[CLWB."16/32/64 mem8"]
Opcode = "0F AE /6"
Instruction = "address"
OperandSizeOverride = true

[CLZERO."64"]
Opcode = "0F 01 FC"

[CMC."16/32/64"]
Opcode = "F5"

[CMOVO."16 reg16 reg/mem16"]
Opcode = "0F 40 /r"
Instruction = "dest src"

[CMOVO."32/64 reg16 reg/mem16"]
Opcode = "0F 40 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVO."32/64 reg32 reg/mem32"]
Opcode = "0F 40 /r"
Instruction = "dest src"

[CMOVO."64 reg64 reg/mem64"]
Opcode = "0F 40 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNO."16 reg16 reg/mem16"]
Opcode = "0F 41 /r"
Instruction = "dest src"

[CMOVNO."32/64 reg16 reg/mem16"]
Opcode = "0F 41 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNO."32/64 reg32 reg/mem32"]
Opcode = "0F 41 /r"
Instruction = "dest src"

[CMOVNO."64 reg64 reg/mem64"]
Opcode = "0F 41 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVB."16 reg16 reg/mem16"]
Opcode = "0F 42 /r"
Instruction = "dest src"

[CMOVB."32/64 reg16 reg/mem16"]
Opcode = "0F 42 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVB."32/64 reg32 reg/mem32"]
Opcode = "0F 42 /r"
Instruction = "dest src"

[CMOVB."64 reg64 reg/mem64"]
Opcode = "0F 42 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVC."16 reg16 reg/mem16"]
Opcode = "0F 42 /r"
Instruction = "dest src"

[CMOVC."32/64 reg16 reg/mem16"]
Opcode = "0F 42 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVC."32/64 reg32 reg/mem32"]
Opcode = "0F 42 /r"
Instruction = "dest src"

[CMOVC."64 reg64 reg/mem64"]
Opcode = "0F 42 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNAE."16 reg16 reg/mem16"]
Opcode = "0F 42 /r"
Instruction = "dest src"

[CMOVNAE."32/64 reg16 reg/mem16"]
Opcode = "0F 42 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNAE."32/64 reg32 reg/mem32"]
Opcode = "0F 42 /r"
Instruction = "dest src"

[CMOVNAE."64 reg64 reg/mem64"]
Opcode = "0F 42 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNB."16 reg16 reg/mem16"]
Opcode = "0F 43 /r"
Instruction = "dest src"

[CMOVNB."32/64 reg16 reg/mem16"]
Opcode = "0F 43 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNB."32/64 reg32 reg/mem32"]
Opcode = "0F 43 /r"
Instruction = "dest src"

[CMOVNB."64 reg64 reg/mem64"]
Opcode = "0F 43 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNC."16 reg16 reg/mem16"]
Opcode = "0F 43 /r"
Instruction = "dest src"

[CMOVNC."32/64 reg16 reg/mem16"]
Opcode = "0F 43 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNC."32/64 reg32 reg/mem32"]
Opcode = "0F 43 /r"
Instruction = "dest src"

[CMOVNC."64 reg64 reg/mem64"]
Opcode = "0F 43 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVEA."16 reg16 reg/mem16"]
Opcode = "0F 43 /r"
Instruction = "dest src"

[CMOVEA."32/64 reg16 reg/mem16"]
Opcode = "0F 43 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVEA."32/64 reg32 reg/mem32"]
Opcode = "0F 43 /r"
Instruction = "dest src"

[CMOVEA."64 reg64 reg/mem64"]
Opcode = "0F 43 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVZ."16 reg16 reg/mem16"]
Opcode = "0F 44 /r"
Instruction = "dest src"

[CMOVZ."32/64 reg16 reg/mem16"]
Opcode = "0F 44 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVZ."32/64 reg32 reg/mem32"]
Opcode = "0F 44 /r"
Instruction = "dest src"

[CMOVZ."64 reg64 reg/mem64"]
Opcode = "0F 44 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVE."16 reg16 reg/mem16"]
Opcode = "0F 44 /r"
Instruction = "dest src"

[CMOVE."32/64 reg16 reg/mem16"]
Opcode = "0F 44 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVE."32/64 reg32 reg/mem32"]
Opcode = "0F 44 /r"
Instruction = "dest src"

[CMOVE."64 reg64 reg/mem64"]
Opcode = "0F 44 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNZ."16 reg16 reg/mem16"]
Opcode = "0F 45 /r"
Instruction = "dest src"

[CMOVNZ."32/64 reg16 reg/mem16"]
Opcode = "0F 45 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNZ."32/64 reg32 reg/mem32"]
Opcode = "0F 45 /r"
Instruction = "dest src"

[CMOVNZ."64 reg64 reg/mem64"]
Opcode = "0F 45 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNE."16 reg16 reg/mem16"]
Opcode = "0F 45 /r"
Instruction = "dest src"

[CMOVNE."32/64 reg16 reg/mem16"]
Opcode = "0F 45 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNE."32/64 reg32 reg/mem32"]
Opcode = "0F 45 /r"
Instruction = "dest src"

[CMOVNE."64 reg64 reg/mem64"]
Opcode = "0F 45 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVBE."16 reg16 reg/mem16"]
Opcode = "0F 46 /r"
Instruction = "dest src"

[CMOVBE."32/64 reg16 reg/mem16"]
Opcode = "0F 46 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVBE."32/64 reg32 reg/mem32"]
Opcode = "0F 46 /r"
Instruction = "dest src"

[CMOVBE."64 reg64 reg/mem64"]
Opcode = "0F 46 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNA."16 reg16 reg/mem16"]
Opcode = "0F 46 /r"
Instruction = "dest src"

[CMOVNA."32/64 reg16 reg/mem16"]
Opcode = "0F 46 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNA."32/64 reg32 reg/mem32"]
Opcode = "0F 46 /r"
Instruction = "dest src"

[CMOVNA."64 reg64 reg/mem64"]
Opcode = "0F 46 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNBE."16 reg16 reg/mem16"]
Opcode = "0F 47 /r"
Instruction = "dest src"

[CMOVNBE."32/64 reg16 reg/mem16"]
Opcode = "0F 47 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNBE."32/64 reg32 reg/mem32"]
Opcode = "0F 47 /r"
Instruction = "dest src"

[CMOVNBE."64 reg64 reg/mem64"]
Opcode = "0F 47 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVA."16 reg16 reg/mem16"]
Opcode = "0F 47 /r"
Instruction = "dest src"

[CMOVA."32/64 reg16 reg/mem16"]
Opcode = "0F 47 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVA."32/64 reg32 reg/mem32"]
Opcode = "0F 47 /r"
Instruction = "dest src"

[CMOVA."64 reg64 reg/mem64"]
Opcode = "0F 47 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVS."16 reg16 reg/mem16"]
Opcode = "0F 48 /r"
Instruction = "dest src"

[CMOVS."32/64 reg16 reg/mem16"]
Opcode = "0F 48 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVS."32/64 reg32 reg/mem32"]
Opcode = "0F 48 /r"
Instruction = "dest src"

[CMOVS."64 reg64 reg/mem64"]
Opcode = "0F 48 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNS."16 reg16 reg/mem16"]
Opcode = "0F 49 /r"
Instruction = "dest src"

[CMOVNS."32/64 reg16 reg/mem16"]
Opcode = "0F 49 /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNS."32/64 reg32 reg/mem32"]
Opcode = "0F 49 /r"
Instruction = "dest src"

[CMOVNS."64 reg64 reg/mem64"]
Opcode = "0F 49 /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVP."16 reg16 reg/mem16"]
Opcode = "0F 4A /r"
Instruction = "dest src"

[CMOVP."32/64 reg16 reg/mem16"]
Opcode = "0F 4A /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVP."32/64 reg32 reg/mem32"]
Opcode = "0F 4A /r"
Instruction = "dest src"

[CMOVP."64 reg64 reg/mem64"]
Opcode = "0F 4A /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVPE."16 reg16 reg/mem16"]
Opcode = "0F 4A /r"
Instruction = "dest src"

[CMOVPE."32/64 reg16 reg/mem16"]
Opcode = "0F 4A /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVPE."32/64 reg32 reg/mem32"]
Opcode = "0F 4A /r"
Instruction = "dest src"

[CMOVPE."64 reg64 reg/mem64"]
Opcode = "0F 4A /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNP."16 reg16 reg/mem16"]
Opcode = "0F 4B /r"
Instruction = "dest src"

[CMOVNP."32/64 reg16 reg/mem16"]
Opcode = "0F 4B /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNP."32/64 reg32 reg/mem32"]
Opcode = "0F 4B /r"
Instruction = "dest src"

[CMOVNP."64 reg64 reg/mem64"]
Opcode = "0F 4B /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVPO."16 reg16 reg/mem16"]
Opcode = "0F 4B /r"
Instruction = "dest src"

[CMOVPO."32/64 reg16 reg/mem16"]
Opcode = "0F 4B /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVPO."32/64 reg32 reg/mem32"]
Opcode = "0F 4B /r"
Instruction = "dest src"

[CMOVPO."64 reg64 reg/mem64"]
Opcode = "0F 4B /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVL."16 reg16 reg/mem16"]
Opcode = "0F 4C /r"
Instruction = "dest src"

[CMOVL."32/64 reg16 reg/mem16"]
Opcode = "0F 4C /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVL."32/64 reg32 reg/mem32"]
Opcode = "0F 4C /r"
Instruction = "dest src"

[CMOVL."64 reg64 reg/mem64"]
Opcode = "0F 4C /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNGE."16 reg16 reg/mem16"]
Opcode = "0F 4C /r"
Instruction = "dest src"

[CMOVNGE."32/64 reg16 reg/mem16"]
Opcode = "0F 4C /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNGE."32/64 reg32 reg/mem32"]
Opcode = "0F 4C /r"
Instruction = "dest src"

[CMOVNGE."64 reg64 reg/mem64"]
Opcode = "0F 4C /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNL."16 reg16 reg/mem16"]
Opcode = "0F 4D /r"
Instruction = "dest src"

[CMOVNL."32/64 reg16 reg/mem16"]
Opcode = "0F 4D /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNL."32/64 reg32 reg/mem32"]
Opcode = "0F 4D /r"
Instruction = "dest src"

[CMOVNL."64 reg64 reg/mem64"]
Opcode = "0F 4D /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVGE."16 reg16 reg/mem16"]
Opcode = "0F 4D /r"
Instruction = "dest src"

[CMOVGE."32/64 reg16 reg/mem16"]
Opcode = "0F 4D /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVGE."32/64 reg32 reg/mem32"]
Opcode = "0F 4D /r"
Instruction = "dest src"

[CMOVGE."64 reg64 reg/mem64"]
Opcode = "0F 4D /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVLE."16 reg16 reg/mem16"]
Opcode = "0F 4E /r"
Instruction = "dest src"

[CMOVLE."32/64 reg16 reg/mem16"]
Opcode = "0F 4E /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVLE."32/64 reg32 reg/mem32"]
Opcode = "0F 4E /r"
Instruction = "dest src"

[CMOVLE."64 reg64 reg/mem64"]
Opcode = "0F 4E /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNG."16 reg16 reg/mem16"]
Opcode = "0F 4E /r"
Instruction = "dest src"

[CMOVNG."32/64 reg16 reg/mem16"]
Opcode = "0F 4E /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNG."32/64 reg32 reg/mem32"]
Opcode = "0F 4E /r"
Instruction = "dest src"

[CMOVNG."64 reg64 reg/mem64"]
Opcode = "0F 4E /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVNLE."16 reg16 reg/mem16"]
Opcode = "0F 4F /r"
Instruction = "dest src"

[CMOVNLE."32/64 reg16 reg/mem16"]
Opcode = "0F 4F /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVNLE."32/64 reg32 reg/mem32"]
Opcode = "0F 4F /r"
Instruction = "dest src"

[CMOVNLE."64 reg64 reg/mem64"]
Opcode = "0F 4F /r"
Instruction = "dest src"
[.REX]
W = 1

[CMOVG."16 reg16 reg/mem16"]
Opcode = "0F 4F /r"
Instruction = "dest src"

[CMOVG."32/64 reg16 reg/mem16"]
Opcode = "0F 4F /r"
Instruction = "dest src"
OperandSizeOverride = true

[CMOVG."32/64 reg32 reg/mem32"]
Opcode = "0F 4F /r"
Instruction = "dest src"

[CMOVG."64 reg64 reg/mem64"]
Opcode = "0F 4F /r"
Instruction = "dest src"
[.REX]
W = 1

[CMP."16/32/64 AL imm8"]
Opcode = "3C ib"
Instruction = "src1 src2"

[CMP."16 AX imm16"]
Opcode = "3D iw"
Instruction = "src1 src2"

[CMP."32/64 AX imm16"]
Opcode = "3D iw"
Instruction = "src1 src2"
OperandSizeOverride = true

[CMP."32/64 EAX imm32"]
Opcode = "3D id"
Instruction = "src1 src2"

[CMP."64 RAX imm32"]
Opcode = "3D id"
Instruction = "src1 src2"
[.REX]
W = 1

[CMP."16/32/64 reg/mem8 imm8"]
Opcode = "80 /7 ib"
Instruction = "src1 src2"

[CMP."16 reg/mem16 imm8"]
Opcode = "83 /7 ib"
Instruction = "src1 src2"

[CMP."32/64 reg/mem16 imm8"]
Opcode = "83 /7 ib"
Instruction = "src1 src2"
OperandSizeOverride = true

[CMP."32/64 reg/mem32 imm8"]
Opcode = "83 /7 ib"
Instruction = "src1 src2"

[CMP."64 reg/mem64 imm8"]
Opcode = "83 /7 ib"
Instruction = "src1 src2"
[.REX]
W = 1

[CMP."16 reg/mem16 imm16"]
Opcode = "81 /7 iw"
Instruction = "src1 src2"

[CMP."32/64 reg/mem16 imm16"]
Opcode = "81 /7 iw"
Instruction = "src1 src2"
OperandSizeOverride = true

[CMP."32/64 reg/mem32 imm32"]
Opcode = "81 /7 id"
Instruction = "src1 src2"

[CMP."64 reg/mem64 imm32"]
Opcode = "81 /7 id"
Instruction = "src1 src2"
[.REX]
W = 1

[CMP."16/32/64 reg/mem8 reg8"]
Opcode = "38 /r"
Instruction = "src1 src2"

[CMP."16 reg/mem16 reg16"]
Opcode = "39 /r"
Instruction = "src1 src2"

[CMP."32/64 reg/mem16 reg16"]
Opcode = "39 /r"
Instruction = "src1 src2"
OperandSizeOverride = true

[CMP."32/64 reg/mem32 reg32"]
Opcode = "39 /r"
Instruction = "src1 src2"

[CMP."64 reg/mem64 reg64"]
Opcode = "39 /r"
Instruction = "src1 src2"
[.REX]
W = 1

[CMP."16/32/64 reg8 reg/mem8"]
Opcode = "3A /r"
Instruction = "src1 src2"

[CMP."16 reg16 reg/mem16"]
Opcode = "3B /r"
Instruction = "src1 src2"

[CMP."32/64 reg16 reg/mem16"]
Opcode = "3B /r"
Instruction = "src1 src2"
OperandSizeOverride = true

[CMP."32/64 reg32 reg/mem32"]
Opcode = "3B /r"
Instruction = "src1 src2"

[CMP."64 reg64 reg/mem64"]
Opcode = "3B /r"
Instruction = "src1 src2"
[.REX]
W = 1

[CMPSB."16/32/64"]
Opcode = "A6"

[CMPSW."16"]
Opcode = "A7"

[CMPSW."32/64"]
Opcode = "A7"
OperandSizeOverride = true

[CMPSD."32/64"]
Opcode = "A7"

[CMPSQ."64"]
Opcode = "A7"
[.REX]
W = 1

[CMPXCHG."16/32/64 reg/mem8 reg8"]
Opcode = "0F B0 /r"
Instruction = "src1 src2"

[CMPXCHG."16 reg/mem16 reg16"]
Opcode = "0F B1 /r"
Instruction = "src1 src2"

[CMPXCHG."32/64 reg/mem16 reg16"]
Opcode = "0F B1 /r"
Instruction = "src1 src2"
OperandSizeOverride = true

[CMPXCHG."32/64 reg/mem32 reg32"]
Opcode = "0F B1 /r"
Instruction = "src1 src2"

[CMPXCHG."64 reg/mem64 reg64"]
Opcode = "0F B1 /r"
Instruction = "src1 src2"
[.REX]
W = 1

[CMPXCHG8B."64 mem64"]
Opcode = "0F C7 /1 m64"
Instruction = "src1"

[CMPXCHG16B."64 mem128"]
Opcode = "0F C7 /1 m128"
Instruction = "src1"

[CPUID."16/32/64"]
Opcode = "0F A2"

[CRC32."32/64 reg32 reg/mem8"]
Opcode = "0F 38 F0 /r"
Instruction = "src/dest1 src2"
Repeat = 0

[CRC32."32/64 reg32 reg/mem16"]
Opcode = "0F 38 F1 /r"
Instruction = "src/dest1 src2"
Repeat = 0

[CRC32."32/64 reg32 reg/mem32"]
Opcode = "0F 38 F1 /r"
Instruction = "src/dest1 src2"
OperandSizeOverride = true
Repeat = 0

[CRC32."64 reg64 reg/mem8"]
Opcode = "0F 38 F0 /r"
Instruction = "src/dest1 src2"
Repeat = 0
[.REX]
W = 1

[CRC32."64 reg64 reg/mem64"]
Opcode = "0F 38 F1 /r"
Instruction = "src/dest1 src2"
Repeat = 0
[.REX]
W = 1

[DAA."16/32/64"]
Opcode = "27"

[DAS."16/32/64"]
Opcode = "2F"

[DEC."16/32/64 reg/mem8"]
Opcode = "FE /1"
Instruction = "src/dest"

[DEC."16 reg16"]
Opcode = "48 +rw"
Instruction = "src/dest"

[DEC."32 reg16"]
Opcode = "48 +rw"
Instruction = "src/dest"
OperandSizeOverride = true

[DEC."32 reg32"]
Opcode = "48 +rd"
Instruction = "src/dest"

[DEC."16 reg/mem16"]
Opcode = "FF /1"
Instruction = "src/dest"

[DEC."32/64 reg/mem16"]
Opcode = "FF /1"
Instruction = "src/dest"
OperandSizeOverride = true

[DEC."32/64 reg/mem32"]
Opcode = "FF /1"
Instruction = "src/dest"

[DEC."64 reg/mem64"]
Opcode = "FF /1"
Instruction = "src/dest"
[.REX]
W = 1

[DIV."16/32/64 reg/mem8"]
Opcode = "F6 /6"
Instruction = "src"

[DIV."16 reg/mem16"]
Opcode = "F7 /6"
Instruction = "src"

[DIV."32/64 reg/mem16"]
Opcode = "F7 /6"
Instruction = "src"
OperandSizeOverride = true

[DIV."32/64 reg/mem32"]
Opcode = "F7 /6"
Instruction = "src"

[DIV."64 reg/mem64"]
Opcode = "F7 /6"
Instruction = "src"
[.REX]
W = 1

[ENTER."16/32/64 imm16"]
Opcode = "C8 iw 00"
Instruction = "size"

[ENTER."16/32/64 imm16 imm8"]
Opcode = "C8 iw ib"
Instruction = "size nest"

[IDIV."16/32/64 reg/mem8"]
Opcode = "F6 /7"
Instruction = "src"

[IDIV."16 reg/mem16"]
Opcode = "F7 /7"
Instruction = "src"

[IDIV."32/64 reg/mem16"]
Opcode = "F7 /7"
Instruction = "src"
OperandSizeOverride = true

[IDIV."32/64 reg/mem32"]
Opcode = "F7 /7"
Instruction = "src"

[IDIV."64 reg/mem64"]
Opcode = "F7 /7"
Instruction = "src"
[.REX]
W = 1

[IMUL."16/32/64 reg/mem8"]
Opcode = "F6 /5"
Instruction = "src"

[IMUL."16 reg/mem16"]
Opcode = "F7 /5"
Instruction = "src"

[IMUL."32/64 reg/mem16"]
Opcode = "F7 /5"
Instruction = "src"
OperandSizeOverride = true

[IMUL."32/64 reg/mem32"]
Opcode = "F7 /5"
Instruction = "src"

[IMUL."64 reg/mem64"]
Opcode = "F7 /5"
Instruction = "src"
[.REX]
W = 1

[IMUL."16 reg16 reg/mem16"]
Opcode = "0F AF /r"
Instruction = "dest src"

[IMUL."32/64 reg16 reg/mem16"]
Opcode = "0F AF /r"
Instruction = "dest src"
OperandSizeOverride = true

[IMUL."32/64 reg32 reg/mem32"]
Opcode = "0F AF /r"
Instruction = "dest src"

[IMUL."64 reg64 reg/mem64"]
Opcode = "0F AF /r"
Instruction = "dest src"
[.REX]
W = 1

[IMUL."16 reg16 reg/mem16 imm8"]
Opcode = "6B /r ib"
Instruction = "dest src1 src2"

[IMUL."32/64 reg16 reg/mem16 imm8"]
Opcode = "6B /r ib"
Instruction = "dest src1 src2"
OperandSizeOverride = true

[IMUL."32/64 reg32 reg/mem32 imm8"]
Opcode = "6B /r ib"
Instruction = "dest src1 src2"

[IMUL."64 reg64 reg/mem64 imm8"]
Opcode = "6B /r ib"
Instruction = "dest src1 src2"
[.REX]
W = 1

[IMUL."16 reg16 reg/mem16 imm16"]
Opcode = "69 /r iw"
Instruction = "dest src1 src2"

[IMUL."32/64 reg16 reg/mem16 imm16"]
Opcode = "69 /r iw"
Instruction = "dest src1 src2"
OperandSizeOverride = true

[IMUL."32/64 reg32 reg/mem32 imm32"]
Opcode = "69 /r id"
Instruction = "dest src1 src2"

[IMUL."64 reg64 reg/mem64 imm32"]
Opcode = "69 /r id"
Instruction = "dest src1 src2"
[.REX]
W = 1

[IN."16/32/64 AL imm8"]
Opcode = "E4 ib"
Instruction = "dest port"

[IN."16 AX imm8"]
Opcode = "E5 ib"
Instruction = "dest port"

[IN."32/64 AX imm8"]
Opcode = "E5 ib"
Instruction = "dest port"
OperandSizeOverride = true

[IN."32/64 EAX imm8"]
Opcode = "E5 ib"
Instruction = "dest port"

[IN."16/32/64 AL"]
Opcode = "EC"
Instruction = "dest"

[IN."16 AX"]
Opcode = "ED"
Instruction = "dest"

[IN."32/64 AX"]
Opcode = "ED"
Instruction = "dest"
OperandSizeOverride = true

[IN."32/64 EAX"]
Opcode = "ED"
Instruction = "dest"

[INC."16/32/64 reg/mem8"]
Opcode = "FE /0"
Instruction = "src/dest"

[INC."16 reg16"]
Opcode = "40 +rw"
Instruction = "src/dest"

[INC."32 reg16"]
Opcode = "40 +rw"
Instruction = "src/dest"
OperandSizeOverride = true

[INC."32 reg32"]
Opcode = "40 +rw"
Instruction = "src/dest"

[INC."16 reg/mem16"]
Opcode = "FF /0"
Instruction = "src/dest"

[INC."32/64 reg/mem16"]
Opcode = "FF /0"
Instruction = "src/dest"
OperandSizeOverride = true

[INC."32/64 reg/mem32"]
Opcode = "FF /0"
Instruction = "src/dest"

[INC."64 reg/mem64"]
Opcode = "FF /0"
Instruction = "src/dest"
[.REX]
W = 1

[INSB."16/32/64"]
Opcode = "6C"

[INSW."16"]
Opcode = "6D"

[INSW."32/64"]
Opcode = "6D"
OperandSizeOverride = true

[INSD."32/64"]
Opcode = "6D"

[INT."16/32/64 imm8"]
Opcode = "CD ib"
Instruction = "vector"

[INTO."16/32"]
Opcode = "CE"

[JO."16/32/64 rel8off"]
Opcode = "70 cb"
Instruction = "target"

[JO."16 rel16off"]
Opcode = "0F 80 cw"
Instruction = "target"

[JO."32/64 rel16off"]
Opcode = "0F 80 cw"
Instruction = "target"
OperandSizeOverride = true

[JO."32/64 rel32off"]
Opcode = "0F 80 cd"
Instruction = "target"

[JNO."16/32/64 rel8off"]
Opcode = "71 cb"
Instruction = "target"

[JNO."16 rel16off"]
Opcode = "0F 81 cw"
Instruction = "target"

[JNO."32/64 rel16off"]
Opcode = "0F 81 cw"
Instruction = "target"
OperandSizeOverride = true

[JNO."32/64 rel32off"]
Opcode = "0F 81 cd"
Instruction = "target"

[JB."16/32/64 rel8off"]
Opcode = "72 cb"
Instruction = "target"

[JB."16 rel16off"]
Opcode = "0F 82 cw"
Instruction = "target"

[JB."32/64 rel16off"]
Opcode = "0F 82 cw"
Instruction = "target"
OperandSizeOverride = true

[JB."32/64 rel32off"]
Opcode = "0F 82 cd"
Instruction = "target"

[JC."16/32/64 rel8off"]
Opcode = "72 cb"
Instruction = "target"

[JC."16 rel16off"]
Opcode = "0F 82 cw"
Instruction = "target"

[JC."32/64 rel16off"]
Opcode = "0F 82 cw"
Instruction = "target"
OperandSizeOverride = true

[JC."32/64 rel32off"]
Opcode = "0F 82 cd"
Instruction = "target"

[JNAE."16/32/64 rel8off"]
Opcode = "72 cb"
Instruction = "target"

[JNAE."16 rel16off"]
Opcode = "0F 82 cw"
Instruction = "target"

[JNAE."32/64 rel16off"]
Opcode = "0F 82 cw"
Instruction = "target"
OperandSizeOverride = true

[JNAE."32/64 rel32off"]
Opcode = "0F 82 cd"
Instruction = "target"

[JNB."16/32/64 rel8off"]
Opcode = "73 cb"
Instruction = "target"

[JNB."16 rel16off"]
Opcode = "0F 83 cw"
Instruction = "target"

[JNB."32/64 rel16off"]
Opcode = "0F 83 cw"
Instruction = "target"
OperandSizeOverride = true

[JNB."32/64 rel32off"]
Opcode = "0F 83 cd"
Instruction = "target"

[JNC."16/32/64 rel8off"]
Opcode = "73 cb"
Instruction = "target"

[JNC."16 rel16off"]
Opcode = "0F 83 cw"
Instruction = "target"

[JNC."32/64 rel16off"]
Opcode = "0F 83 cw"
Instruction = "target"
OperandSizeOverride = true

[JNC."32/64 rel32off"]
Opcode = "0F 83 cd"
Instruction = "target"

[JAE."16/32/64 rel8off"]
Opcode = "73 cb"
Instruction = "target"

[JAE."16 rel16off"]
Opcode = "0F 83 cw"
Instruction = "target"

[JAE."32/64 rel16off"]
Opcode = "0F 83 cw"
Instruction = "target"
OperandSizeOverride = true

[JAE."32/64 rel32off"]
Opcode = "0F 83 cd"
Instruction = "target"

[JZ."16/32/64 rel8off"]
Opcode = "74 cb"
Instruction = "target"

[JZ."16 rel16off"]
Opcode = "0F 84 cw"
Instruction = "target"

[JZ."32/64 rel16off"]
Opcode = "0F 84 cw"
Instruction = "target"
OperandSizeOverride = true

[JZ."32/64 rel32off"]
Opcode = "0F 84 cd"
Instruction = "target"

[JE."16/32/64 rel8off"]
Opcode = "74 cb"
Instruction = "target"

[JE."16 rel16off"]
Opcode = "0F 84 cw"
Instruction = "target"

[JE."32/64 rel16off"]
Opcode = "0F 84 cw"
Instruction = "target"
OperandSizeOverride = true

[JE."32/64 rel32off"]
Opcode = "0F 84 cd"
Instruction = "target"

[JNZ."16/32/64 rel8off"]
Opcode = "75 cb"
Instruction = "target"

[JNZ."16 rel16off"]
Opcode = "0F 85 cw"
Instruction = "target"

[JNZ."32/64 rel16off"]
Opcode = "0F 85 cw"
Instruction = "target"
OperandSizeOverride = true

[JNZ."32/64 rel32off"]
Opcode = "0F 85 cd"
Instruction = "target"

[JNE."16/32/64 rel8off"]
Opcode = "75 cb"
Instruction = "target"

[JNE."16 rel16off"]
Opcode = "0F 85 cw"
Instruction = "target"

[JNE."32/64 rel16off"]
Opcode = "0F 85 cw"
Instruction = "target"
OperandSizeOverride = true

[JNE."32/64 rel32off"]
Opcode = "0F 85 cd"
Instruction = "target"

[JBE."16/32/64 rel8off"]
Opcode = "76 cb"
Instruction = "target"

[JBE."16 rel16off"]
Opcode = "0F 86 cw"
Instruction = "target"

[JBE."32/64 rel16off"]
Opcode = "0F 86 cw"
Instruction = "target"
OperandSizeOverride = true

[JBE."32/64 rel32off"]
Opcode = "0F 86 cd"
Instruction = "target"

[JNA."16/32/64 rel8off"]
Opcode = "76 cb"
Instruction = "target"

[JNA."16 rel16off"]
Opcode = "0F 86 cw"
Instruction = "target"

[JNA."32/64 rel16off"]
Opcode = "0F 86 cw"
Instruction = "target"
OperandSizeOverride = true

[JNA."32/64 rel32off"]
Opcode = "0F 86 cd"
Instruction = "target"

[JNBE."16/32/64 rel8off"]
Opcode = "77 cb"
Instruction = "target"

[JNBE."16 rel16off"]
Opcode = "0F 87 cw"
Instruction = "target"

[JNBE."32/64 rel16off"]
Opcode = "0F 87 cw"
Instruction = "target"
OperandSizeOverride = true

[JNBE."32/64 rel32off"]
Opcode = "0F 87 cd"
Instruction = "target"

[JA."16/32/64 rel8off"]
Opcode = "77 cb"
Instruction = "target"

[JA."16 rel16off"]
Opcode = "0F 87 cw"
Instruction = "target"

[JA."32/64 rel16off"]
Opcode = "0F 87 cw"
Instruction = "target"
OperandSizeOverride = true

[JA."32/64 rel32off"]
Opcode = "0F 87 cd"
Instruction = "target"

[JS."16/32/64 rel8off"]
Opcode = "78 cb"
Instruction = "target"

[JS."16 rel16off"]
Opcode = "0F 88 cw"
Instruction = "target"

[JS."32/64 rel16off"]
Opcode = "0F 88 cw"
Instruction = "target"
OperandSizeOverride = true

[JS."32/64 rel32off"]
Opcode = "0F 88 cd"
Instruction = "target"

[JNS."16/32/64 rel8off"]
Opcode = "79 cb"
Instruction = "target"

[JNS."16 rel16off"]
Opcode = "0F 89 cw"
Instruction = "target"

[JNS."32/64 rel16off"]
Opcode = "0F 89 cw"
Instruction = "target"
OperandSizeOverride = true

[JNS."32/64 rel32off"]
Opcode = "0F 89 cd"
Instruction = "target"

[JP."16/32/64 rel8off"]
Opcode = "7A cb"
Instruction = "target"

[JP."16 rel16off"]
Opcode = "0F 8A cw"
Instruction = "target"

[JP."32/64 rel16off"]
Opcode = "0F 8A cw"
Instruction = "target"
OperandSizeOverride = true

[JP."32/64 rel32off"]
Opcode = "0F 8A cd"
Instruction = "target"

[JPE."16/32/64 rel8off"]
Opcode = "7A cb"
Instruction = "target"

[JPE."16 rel16off"]
Opcode = "0F 8A cw"
Instruction = "target"

[JPE."32/64 rel16off"]
Opcode = "0F 8A cw"
Instruction = "target"
OperandSizeOverride = true

[JPE."32/64 rel32off"]
Opcode = "0F 8A cd"
Instruction = "target"

[JNP."16/32/64 rel8off"]
Opcode = "7B cb"
Instruction = "target"

[JNP."16 rel16off"]
Opcode = "0F 8B cw"
Instruction = "target"

[JNP."32/64 rel16off"]
Opcode = "0F 8B cw"
Instruction = "target"
OperandSizeOverride = true

[JNP."32/64 rel32off"]
Opcode = "0F 8B cd"
Instruction = "target"

[JPO."16/32/64 rel8off"]
Opcode = "7B cb"
Instruction = "target"

[JPO."16 rel16off"]
Opcode = "0F 8B cw"
Instruction = "target"

[JPO."32/64 rel16off"]
Opcode = "0F 8B cw"
Instruction = "target"
OperandSizeOverride = true

[JPO."32/64 rel32off"]
Opcode = "0F 8B cd"
Instruction = "target"

[JL."16/32/64 rel8off"]
Opcode = "7C cb"
Instruction = "target"

[JL."16 rel16off"]
Opcode = "0F 8C cw"
Instruction = "target"

[JL."32/64 rel16off"]
Opcode = "0F 8C cw"
Instruction = "target"
OperandSizeOverride = true

[JL."32/64 rel32off"]
Opcode = "0F 8C cd"
Instruction = "target"

[JNGE."16/32/64 rel8off"]
Opcode = "7C cb"
Instruction = "target"

[JNGE."16 rel16off"]
Opcode = "0F 8C cw"
Instruction = "target"

[JNGE."32/64 rel16off"]
Opcode = "0F 8C cw"
Instruction = "target"
OperandSizeOverride = true

[JNGE."32/64 rel32off"]
Opcode = "0F 8C cd"
Instruction = "target"

[JNL."16/32/64 rel8off"]
Opcode = "7D cb"
Instruction = "target"

[JNL."16 rel16off"]
Opcode = "0F 8D cw"
Instruction = "target"

[JNL."32/64 rel16off"]
Opcode = "0F 8D cw"
Instruction = "target"
OperandSizeOverride = true

[JNL."32/64 rel32off"]
Opcode = "0F 8D cd"
Instruction = "target"

[JGE."16/32/64 rel8off"]
Opcode = "7D cb"
Instruction = "target"

[JGE."16 rel16off"]
Opcode = "0F 8D cw"
Instruction = "target"

[JGE."32/64 rel16off"]
Opcode = "0F 8D cw"
Instruction = "target"
OperandSizeOverride = true

[JGE."32/64 rel32off"]
Opcode = "0F 8D cd"
Instruction = "target"

[JLE."16/32/64 rel8off"]
Opcode = "7E cb"
Instruction = "target"

[JLE."16 rel16off"]
Opcode = "0F 8E cw"
Instruction = "target"

[JLE."32/64 rel16off"]
Opcode = "0F 8E cw"
Instruction = "target"
OperandSizeOverride = true

[JLE."32/64 rel32off"]
Opcode = "0F 8E cd"
Instruction = "target"

[JNG."16/32/64 rel8off"]
Opcode = "7E cb"
Instruction = "target"

[JNG."16 rel16off"]
Opcode = "0F 8E cw"
Instruction = "target"

[JNG."32/64 rel16off"]
Opcode = "0F 8E cw"
Instruction = "target"
OperandSizeOverride = true

[JNG."32/64 rel32off"]
Opcode = "0F 8E cd"
Instruction = "target"

[JNLE."16/32/64 rel8off"]
Opcode = "7F cb"
Instruction = "target"

[JNLE."16 rel16off"]
Opcode = "0F 8F cw"
Instruction = "target"

[JNLE."32/64 rel16off"]
Opcode = "0F 8F cw"
Instruction = "target"
OperandSizeOverride = true

[JNLE."32/64 rel32off"]
Opcode = "0F 8F cd"
Instruction = "target"

[JG."16/32/64 rel8off"]
Opcode = "7F cb"
Instruction = "target"

[JG."16 rel16off"]
Opcode = "0F 8F cw"
Instruction = "target"

[JG."32/64 rel16off"]
Opcode = "0F 8F cw"
Instruction = "target"
OperandSizeOverride = true

[JG."32/64 rel32off"]
Opcode = "0F 8F cd"
Instruction = "target"

[JCXZ."16 rel8off"]
Opcode = "E3 cb"
Instruction = "target"

[JCXZ."32 rel8off"]
Opcode = "E3 cb"
Instruction = "target"
AddressSizeOverride = true

[JECXZ."32 rel8off"]
Opcode = "E3 cb"
Instruction = "target"

[JECXZ."64 rel8off"]
Opcode = "E3 cb"
Instruction = "target"
AddressSizeOverride = true

[JRCXZ."64 rel8off"]
Opcode = "E3 cb"
Instruction = "target"

[JMP."16/32/64 rel8off"]
Opcode = "EB cb"
Instruction = "target"

[JMP."16 rel16off"]
Opcode = "E9 cw"
Instruction = "target"

[JMP."32/64 rel16off"]
Opcode = "E9 cw"
Instruction = "target"
OperandSizeOverride = true

[JMP."32/64 rel32off"]
Opcode = "E9 cd"
Instruction = "target"

[JMP."16 reg/mem16"]
Opcode = "FF /4"
Instruction = "target"

[JMP."32 reg/mem16"]
Opcode = "FF /4"
Instruction = "target"
OperandSizeOverride = true

[JMP."32 reg/mem32"]
Opcode = "FF /4"
Instruction = "target"

[JMP."64 reg/mem64"]
Opcode = "FF /4"
Instruction = "target"

[JMP."16 pntr16:16"]
Opcode = "EA cd"
Instruction = "target"

[JMP."32 pntr16:32"]
Opcode = "EA cp"
Instruction = "target"

[JMP."16 mem16:16"]
Opcode = "FF /5"
Instruction = "target"

[JMP."32 mem16:16"]
Opcode = "FF /5"
Instruction = "target"
AddressSizeOverride = true

[JMP."32/64 mem16:32"]
Opcode = "FF /5"
Instruction = "target"

[LAHF."16/32"]
Opcode = "9F"

[LDS."16 reg16 mem16:16"]
Opcode = "C5 /r"
Instruction = "dest src"

[LDS."32 reg16 mem16:16"]
Opcode = "C5 /r"
Instruction = "dest src"
OperandSizeOverride = true
AddressSizeOverride = true

[LDS."32 reg32 mem16:32"]
Opcode = "C5 /r"
Instruction = "dest src"

[LES."16 reg16 mem16:16"]
Opcode = "C4 /r"
Instruction = "dest src"

[LES."32 reg16 mem16:16"]
Opcode = "C4 /r"
Instruction = "dest src"
OperandSizeOverride = true
AddressSizeOverride = true

[LES."32 reg32 mem16:32"]
Opcode = "C4 /r"
Instruction = "dest src"

[LFS."16 reg16 mem16:16"]
Opcode = "0F B4 /r"
Instruction = "dest src"

[LFS."32 reg16 mem16:16"]
Opcode = "0F B4 /r"
Instruction = "dest src"
OperandSizeOverride = true
AddressSizeOverride = true

[LFS."32 reg32 mem16:32"]
Opcode = "0F B4 /r"
Instruction = "dest src"

[LGS."16 reg16 mem16:16"]
Opcode = "0F B5 /r"
Instruction = "dest src"

[LGS."32 reg16 mem16:16"]
Opcode = "0F B5 /r"
Instruction = "dest src"
OperandSizeOverride = true
AddressSizeOverride = true

[LGS."32 reg32 mem16:32"]
Opcode = "0F B5 /r"
Instruction = "dest src"

[LSS."16 reg16 mem16:16"]
Opcode = "0F B2 /r"
Instruction = "dest src"

[LSS."32 reg16 mem16:16"]
Opcode = "0F B2 /r"
Instruction = "dest src"
OperandSizeOverride = true
AddressSizeOverride = true

[LSS."32 reg32 mem16:32"]
Opcode = "0F B2 /r"
Instruction = "dest src"

[LEA."16 reg16 mem"]
Opcode = "8D /r"
Instruction = "dest src"

[LEA."32/64 reg16 mem"]
Opcode = "8D /r"
Instruction = "dest src"
OperandSizeOverride = true
AddressSizeOverride = true

[LEA."32/64 reg32 mem"]
Opcode = "8D /r"
Instruction = "dest src"

[LEA."64 reg64 mem"]
Opcode = "8D /r"
Instruction = "dest src"
[.REX]
W = 1

[LEAVE."16/32/64"]
Opcode = "C9"

[LFENCE."16/32/64"]
Opcode = "0F AE E8"

[LLWPCB."32/64 reg32"]
Opcode = "12 /0"
Instruction = "address"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 0
vvvv = 0b1111
L = 0
pp = 0

[LLWPCB."64 reg64"]
Opcode = "12 /0"
Instruction = "address"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 1
vvvv = 0b1111
L = 0
pp = 0

[LODSB."16/32/64"]
Opcode = "AC"

[LODSW."16"]
Opcode = "AD"

[LODSW."32/64"]
Opcode = "AD"
OperandSizeOverride = true

[LODSD."32/64"]
Opcode = "AD"

[LODSQ."64"]
Opcode = "AD"
[.REX]
W = 1

[LOOP."16/32/64 rel8off"]
Opcode = "E2 cb"
Instruction = "target"

[LOOPE."16/32/64 rel8off"]
Opcode = "E1 cb"
Instruction = "target"

[LOOPZ."16/32/64 rel8off"]
Opcode = "E1 cb"
Instruction = "target"

[LOOPNE."16/32/64 rel8off"]
Opcode = "E0 cb"
Instruction = "target"

[LOOPNZ."16/32/64 rel8off"]
Opcode = "E0 cb"
Instruction = "target"

[LWPINS."32/64 reg32 reg/mem32 imm32"]
Opcode = "12 /0 id"
Instruction = "src1 src2 src3"
XOP = true
[.RXBmap_select]
map_select = 0x0A
[..WvvvvLpp]
W = 0
vvvv = "src1"
L = 0
pp = 0

[LWPINS."64 reg64 reg/mem32 imm32"]
Opcode = "12 /0 id"
Instruction = "src1 src2 src3"
XOP = true
[.RXBmap_select]
map_select = 0x0A
[..WvvvvLpp]
W = 1
vvvv = "src1"
L = 0
pp = 0

[LWPVAL."32/64 reg32 reg/mem32 imm32"]
Opcode = "12 /1 id"
Instruction = "src1 src2 src3"
XOP = true
[.RXBmap_select]
map_select = 0x0A
[..WvvvvLpp]
W = 0
vvvv = "src1"
L = 0
pp = 0

[LWPVAL."64 reg64 reg/mem32 imm32"]
Opcode = "12 /1 id"
Instruction = "src1 src2 src3"
XOP = true
[.RXBmap_select]
map_select = 0x0A
[..WvvvvLpp]
W = 1
vvvv = "src1"
L = 0
pp = 0

[LZCNT."16 reg16 reg/mem16"]
Opcode = "0F BD /r"
Instruction = "dest src"
Repeat = 1

[LZCNT."32/64 reg16 reg/mem16"]
Opcode = "0F BD /r"
Instruction = "dest src"
Repeat = 1
OperandSizeOverride = true

[LZCNT."32/64 reg32 reg/mem32"]
Opcode = "0F BD /r"
Instruction = "dest src"
Repeat = 1

[LZCNT."64 reg64 reg/mem64"]
Opcode = "0F BD /r"
Instruction = "dest src"
Repeat = 1
[.REX]
W = 1

[MCOMMIT."16/32/64"]
Opcode = "0F 01 FA"
Repeat = 1

[MFENCE."16/32/64"]
Opcode = "0F AE F0"

[MONITORX."16/32/64"]
Opcode = "0F 01 FA"

[MOV."16/32/64 reg/mem8 reg8"]
Opcode = "88 /r"
Instruction = "dest src"

[MOV."16 reg/mem16 reg16"]
Opcode = "89 /r"
Instruction = "dest src"

[MOV."32/64 reg/mem16 reg16"]
Opcode = "89 /r"
Instruction = "dest src"
OperandSizeOverride = true

[MOV."32/64 reg/mem32 reg32"]
Opcode = "89 /r"
Instruction = "dest src"

[MOV."64 reg/mem64 reg64"]
Opcode = "89 /r"
Instruction = "dest src"
[.REX]
W = 1

[MOV."16/32/64 reg8 reg/mem8"]
Opcode = "8A /r"
Instruction = "dest src"

[MOV."16 reg16 reg/mem8"]
Opcode = "8B /r"
Instruction = "dest src"

[MOV."32/64 reg16 reg/mem8"]
Opcode = "8B /r"
Instruction = "dest src"
OperandSizeOverride = true

[MOV."32/64 reg32 reg/mem8"]
Opcode = "8B /r"
Instruction = "dest src"

[MOV."64 reg64 reg/mem8"]
Opcode = "8B /r"
Instruction = "dest src"
[.REX]
W = 1

[MOV."16 reg/mem16 segReg"]
Opcode = "8C /r"
Instruction = "dest src"

[MOV."32/64 reg/mem16 segReg"]
Opcode = "8C /r"
Instruction = "dest src"
OperandSizeOverride = true

[MOV."32/64 reg32 segReg"]
Opcode = "8C /r"
Instruction = "dest src"

[MOV."64 reg64 segReg"]
Opcode = "8C /r"
Instruction = "dest src"
[.REX]
W = 1

[MOV."16/32/64 segReg reg/mem16"]
Opcode = "8E /r"
Instruction = "dest src"

[MOV."16/32/64 AL moffset8"]
Opcode = "A0"
Instruction = "dest src"

[MOV."16 AX moffset16"]
Opcode = "A1"
Instruction = "dest src"

[MOV."32/64 AX moffset16"]
Opcode = "A1"
Instruction = "dest src"
OperandSizeOverride = true

[MOV."32/64 EAX moffset32"]
Opcode = "A1"
Instruction = "dest src"

[MOV."64 RAX moffset64"]
Opcode = "A1"
Instruction = "dest src"
[.REX]
W = 1

[MOV."16/32/64 reg8 imm8"]
Opcode = "B0 +rb ib"
Instruction = "dest src"

[MOV."16 reg16 imm16"]
Opcode = "B8 +rw iw"
Instruction = "dest src"

[MOV."32/64 reg16 imm16"]
Opcode = "B8 +rw iw"
Instruction = "dest src"
OperandSizeOverride = true

[MOV."32/64 reg32 imm32"]
Opcode = "B8 +rd id"
Instruction = "dest src"

[MOV."64 reg64 imm64"]
Opcode = "B8 +rq iq"
Instruction = "dest src"
[.REX]
W = 1

[MOV."16/32/64 reg/mem8 imm8"]
Opcode = "C6 /0 ib"
Instruction = "dest src"

[MOV."16 reg/mem16 imm16"]
Opcode = "C7 /0 iw"
Instruction = "dest src"

[MOV."32/64 reg/mem16 imm16"]
Opcode = "C7 /0 iw"
Instruction = "dest src"
OperandSizeOverride = true

[MOV."32/64 reg/mem32 imm32"]
Opcode = "C7 /0 id"
Instruction = "dest src"

[MOV."64 reg/mem64 imm32"]
Opcode = "C7 /0 id"
Instruction = "dest src"
[.REX]
W = 1

[MOVBE."16 reg16 mem16"]
Opcode = "0F 38 F0 /r"
Instruction = "dest src"

[MOVBE."32/64 reg16 mem16"]
Opcode = "0F 38 F0 /r"
Instruction = "dest src"
OperandSizeOverride = true

[MOVBE."32/64 reg32 mem32"]
Opcode = "0F 38 F0 /r"
Instruction = "dest src"

[MOVBE."64 reg64 mem64"]
Opcode = "0F 38 F0 /r"
Instruction = "dest src"
[.REX]
W = 1

[MOVBE."16 mem16 reg16"]
Opcode = "0F 38 F1 /r"
Instruction = "dest src"

[MOVBE."32/64 mem16 reg16"]
Opcode = "0F 38 F1 /r"
Instruction = "dest src"
OperandSizeOverride = true

[MOVBE."32/64 mem32 reg32"]
Opcode = "0F 38 F1 /r"
Instruction = "dest src"

[MOVBE."64 mem64 reg64"]
Opcode = "0F 38 F1 /r"
Instruction = "dest src"
[.REX]
W = 1

[MOVD."32/64 xmm reg/mem32"]
Opcode = "0F 6E /r"
Instruction = "dest src"
OperandSizeOverride = true

[MOVD."64 xmm reg/mem64"]
Opcode = "0F 6E /r"
Instruction = "dest src"
OperandSizeOverride = true
[.REX]
W = 1

[MOVD."32/64 reg/mem32 xmm"]
Opcode = "0F 7E /r"
Instruction = "dest src"
OperandSizeOverride = true

[MOVD."64 reg/mem64 xmm"]
Opcode = "0F 7E /r"
Instruction = "dest src"
OperandSizeOverride = true
[.REX]
W = 1

[MOVD."32/64 mmx reg/mem32"]
Opcode = "0F 6E /r"
Instruction = "dest src"

[MOVD."64 mmx reg/mem64"]
Opcode = "0F 6E /r"
Instruction = "dest src"
[.REX]
W = 1

[MOVD."32/64 reg/mem32 mmx"]
Opcode = "0F 7E /r"
Instruction = "dest src"

[MOVD."64 reg/mem64 mmx"]
Opcode = "0F 7E /r"
Instruction = "dest src"
[.REX]
W = 1

[MOVMSKPD."32/64 reg32 xmm"]
Opcode = "0F 50 /r"
Instruction = "dest src"
OperandSizeOverride = true

[MOVMSKPS."32/64 reg32 xmm"]
Opcode = "0F 50 /r"
Instruction = "dest src"

[MOVNTI."32/64 mem32 reg32"]
Opcode = "0F C3 /r"
Instruction = "dest src"

[MOVNTI."64 mem64 reg64"]
Opcode = "0F C3 /r"
Instruction = "dest src"
[.REX]
W = 1

[MOVSB."16/32/64"]
Opcode = "A4"

[MOVSW."16"]
Opcode = "A5"

[MOVSW."32/64"]
Opcode = "A5"
OperandSizeOverride = true

[MOVSD."32/64"]
Opcode = "A5"

[MOVSQ."64"]
Opcode = "A5"
[.REX]
W = 1

[MOVSX."16 reg16 reg/mem8"]
Opcode = "0F BE /r"
Instruction = "dest src"

[MOVSX."32/64 reg16 reg/mem8"]
Opcode = "0F BE /r"
Instruction = "dest src"
OperandSizeOverride = true

[MOVSX."32/64 reg32 reg/mem8"]
Opcode = "0F BE /r"
Instruction = "dest src"

[MOVSX."64 reg64 reg/mem8"]
Opcode = "0F BE /r"
Instruction = "dest src"
[.REX]
W = 1

[MOVSX."32/64 reg32 reg/mem16"]
Opcode = "0F BF /r"
Instruction = "dest src"

[MOVSX."64 reg64 reg/mem16"]
Opcode = "0F BF /r"
Instruction = "dest src"
[.REX]
W = 1

[MOVSXD."64 reg16 reg/mem32"]
Opcode = "63 /r"
Instruction = "dest src"
OperandSizeOverride = true

[MOVSXD."64 reg32 reg/mem32"]
Opcode = "63 /r"
Instruction = "dest src"

[MOVSXD."64 reg64 reg/mem32"]
Opcode = "63 /r"
Instruction = "dest src"
[.REX]
W = 1

[MOVZX."16 reg16 reg/mem8"]
Opcode = "0F B6 /r"
Instruction = "dest src"

[MOVZX."32/64 reg16 reg/mem8"]
Opcode = "0F B6 /r"
Instruction = "dest src"
OperandSizeOverride = true

[MOVZX."32/64 reg32 reg/mem8"]
Opcode = "0F B6 /r"
Instruction = "dest src"

[MOVZX."64 reg64 reg/mem8"]
Opcode = "0F B6 /r"
Instruction = "dest src"
[.REX]
W = 1

[MOVZX."32/64 reg32 reg/mem16"]
Opcode = "0F B7 /r"
Instruction = "dest src"

[MOVZX."64 reg64 reg/mem16"]
Opcode = "0F B7 /r"
Instruction = "dest src"
[.REX]
W = 1

[MUL."16/32/64 reg/mem8"]
Opcode = "F6 /4"
Instruction = "src"

[MUL."16 reg/mem16"]
Opcode = "F7 /4"
Instruction = "src"

[MUL."32/64 reg/mem16"]
Opcode = "F7 /4"
Instruction = "src"
OperandSizeOverride = true

[MUL."32/64 reg/mem32"]
Opcode = "F7 /4"
Instruction = "src"

[MUL."64 reg/mem64"]
Opcode = "F7 /4"
Instruction = "src"
[.REX]
W = 1

[MULX."32/64 reg32 reg32 reg/mem32"]
Opcode = "F6 /r"
Instruction = "dest1 dest2 src"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "dest2"
L = 0
pp = 0

[MULX."64 reg64 reg64 reg/mem64"]
Opcode = "F6 /r"
Instruction = "dest1 dest2 src"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "dest2"
L = 0
pp = 0

[MWAITX."16/32/64"]
Opcode = "0F 01 FB"

[NEG."16/32/64 reg/mem8"]
Opcode = "F6 /3"
Instruction = "src/dest"

[NEG."16 reg/mem16"]
Opcode = "F7 /3"
Instruction = "src/dest"

[NEG."32/64 reg/mem16"]
Opcode = "F7 /3"
Instruction = "src/dest"
OperandSizeOverride = true

[NEG."32/64 reg/mem32"]
Opcode = "F7 /3"
Instruction = "src/dest"

[NEG."64 reg/mem64"]
Opcode = "F7 /3"
Instruction = "src/dest"
[.REX]
W = 1

[NOP."16/32/64"]
Opcode = "90"

[NOP."16 reg/mem16"]
Opcode = "0F 1F /0"
Instruction = "regmem"

[NOP."32/64 reg/mem16"]
Opcode = "0F 1F /0"
Instruction = "regmem"
OperandSizeOverride = true

[NOP."32/64 reg/mem32"]
Opcode = "0F 1F /0"
Instruction = "regmem"

[NOP."64 reg/mem64"]
Opcode = "0F 1F /0"
Instruction = "regmem"
[.REX]
W = 1

[NOT."16/32/64 reg/mem8"]
Opcode = "F6 /2"
Instruction = "src/dest"

[NOT."16 reg/mem16"]
Opcode = "F7 /2"
Instruction = "src/dest"

[NOT."32/64 reg/mem16"]
Opcode = "F7 /2"
Instruction = "src/dest"
OperandSizeOverride = true

[NOT."32/64 reg/mem32"]
Opcode = "F7 /2"
Instruction = "src/dest"

[NOT."64 reg/mem64"]
Opcode = "F7 /2"
Instruction = "src/dest"
[.REX]
W = 1

[OR."16/32/64 AL imm8"]
Opcode = "OC ib"
Instruction = "dest src"

[OR."16 AX imm16"]
Opcode = "OD iw"
Instruction = "dest src"

[OR."32/64 AX imm16"]
Opcode = "OD iw"
Instruction = "dest src"
OperandSizeOverride = true

[OR."32/64 EAX imm32"]
Opcode = "OD id"
Instruction = "dest src"

[OR."64 RAX imm32"]
Opcode = "OD id"
Instruction = "dest src"
[.REX]
W = 1

[OR."16/32/64 reg/mem8 imm8"]
Opcode = "80 /1 ib"
Instruction = "dest src"

[OR."16 reg/mem16 imm8"]
Opcode = "83 /1 ib"
Instruction = "dest src"

[OR."32/64 reg/mem16 imm8"]
Opcode = "83 /1 ib"
Instruction = "dest src"
OperandSizeOverride = true

[OR."32/64 reg/mem32 imm8"]
Opcode = "83 /1 ib"
Instruction = "dest src"

[OR."64 reg/mem64 imm8"]
Opcode = "83 /1 ib"
Instruction = "dest src"
[.REX]
W = 1

[OR."16 reg/mem16 imm16"]
Opcode = "81 /1 iw"
Instruction = "dest src"

[OR."32/64 reg/mem16 imm16"]
Opcode = "81 /1 iw"
Instruction = "dest src"
OperandSizeOverride = true

[OR."32/64 reg/mem32 imm32"]
Opcode = "81 /1 id"
Instruction = "dest src"

[OR."64 reg/mem64 imm32"]
Opcode = "81 /1 id"
Instruction = "dest src"
[.REX]
W = 1

[OR."16/32/64 reg/mem8 reg8"]
Opcode = "08 /r"
Instruction = "dest src"

[OR."16 reg/mem16 reg16"]
Opcode = "09 /r"
Instruction = "dest src"

[OR."32/64 reg/mem16 reg16"]
Opcode = "09 /r"
Instruction = "dest src"
OperandSizeOverride = true

[OR."32/64 reg/mem32 reg32"]
Opcode = "09 /r"
Instruction = "dest src"

[OR."64 reg/mem64 reg64"]
Opcode = "09 /r"
Instruction = "dest src"
[.REX]
W = 1

[OR."16/32/64 reg8 reg/mem8"]
Opcode = "0A /r"
Instruction = "dest src"

[OR."16 reg16 reg/mem16"]
Opcode = "0B /r"
Instruction = "dest src"

[OR."32/64 reg16 reg/mem16"]
Opcode = "0B /r"
Instruction = "dest src"
OperandSizeOverride = true

[OR."32/64 reg32 reg/mem32"]
Opcode = "0B /r"
Instruction = "dest src"

[OR."64 reg64 reg/mem64"]
Opcode = "0B /r"
Instruction = "dest src"
[.REX]
W = 1

[OUT."16/32/64 imm8 AL"]
Opcode = "E6 ib"
Instruction = "port src"

[OUT."16 imm8 AX"]
Opcode = "E7 ib"
Instruction = "port src"

[OUT."32/64 imm8 AX"]
Opcode = "E7 ib"
Instruction = "port src"
OperandSizeOverride = true

[OUT."32/64 imm8 EAX"]
Opcode = "E7 ib"
Instruction = "port src"

[OUT."16/32/64 AL"]
Opcode = "EE"
Instruction = "src"

[OUT."16 AX"]
Opcode = "EF"
Instruction = "src"

[OUT."32/64 AX"]
Opcode = "EF"
Instruction = "src"
OperandSizeOverride = true

[OUT."32/64 EAX"]
Opcode = "EF"
Instruction = "src"

[OUTSB."16/32/64"]
Opcode = "6E"

[OUTSW."16"]
Opcode = "6F"

[OUTSW."32/64"]
Opcode = "6F"
OperandSizeOverride = true

[OUTSD."32/64"]
Opcode = "6F"

[PAUSE."16/32/64"]
Opcode = "90"
Repeat = 1

[PDEP."32/64 reg32 reg32 reg/mem32"]
Opcode = "F5 /r"
Instruction = "dest src mask"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "src"
L = 0
pp = 0b11

[PDEP."64 reg64 reg64 reg/mem64"]
Opcode = "F5 /r"
Instruction = "dest src mask"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "src"
L = 0
pp = 0b11

[PEXT."32/64 reg32 reg32 reg/mem32"]
Opcode = "F5 /r"
Instruction = "dest src mask"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "src"
L = 0
pp = 0b10

[PEXT."64 reg64 reg64 reg/mem64"]
Opcode = "F5 /r"
Instruction = "dest src mask"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "src"
L = 0
pp = 0b10

[POP."16 reg16"]
Opcode = "58 +rw"
Instruction = "dest"

[POP."32/64 reg16"]
Opcode = "58 +rw"
Instruction = "dest"
OperandSizeOverride = true

[POP."32 reg32"]
Opcode = "58 +rd"
Instruction = "dest"

[POP."64 reg64"]
Opcode = "58 +rq"
Instruction = "dest"

[POP."16 reg/mem16"]
Opcode = "8F /0"
Instruction = "dest"

[POP."32/64 reg/mem16"]
Opcode = "8F /0"
Instruction = "dest"
OperandSizeOverride = true

[POP."32 reg/mem32"]
Opcode = "8F /0"
Instruction = "dest"

[POP."64 reg/mem64"]
Opcode = "8F /0"
Instruction = "dest"

[POP."16/32/64 DS"]
Opcode = "1F"
Instruction = "dest"

[POP."16/32/64 ES"]
Opcode = "0F"
Instruction = "dest"

[POP."16/32/64 SS"]
Opcode = "17"
Instruction = "dest"

[POP."16/32/64 FS"]
Opcode = "0F A1"
Instruction = "dest"

[POP."16/32/64 GS"]
Opcode = "0F A9"
Instruction = "dest"

[POPA."16"]
Opcode = "61"

[POPA."32"]
Opcode = "61"
OperandSizeOverride = true

[POPAD."32"]
Opcode = "61"

[POPCNT."16 reg16 reg/mem16"]
Opcode = "0F B8 /r"
Instruction = "dest src"
Repeat = 1

[POPCNT."32/64 reg16 reg/mem16"]
Opcode = "0F B8 /r"
Instruction = "dest src"
Repeat = 1
OperandSizeOverride = true

[POPCNT."32/64 reg32 reg/mem32"]
Opcode = "0F B8 /r"
Instruction = "dest src"
Repeat = 1

[POPCNT."64 reg64 reg/mem64"]
Opcode = "0F B8 /r"
Instruction = "dest src"
Repeat = 1
[.REX]
W = 1

[POPF."16"]
Opcode = "9D"

[POPF."32"]
Opcode = "9D"
OperandSizeOverride = true

[POPFD."32"]
Opcode = "9D"

[POPFQ."64"]
Opcode = "9D"

[PREFETCH."16/32/64 mem8"]
Opcode = "0F 0D /0"
Instruction = "location"

[PREFETCHW."16/32/64 mem8"]
Opcode = "0F 0D /1"
Instruction = "location"

[PREFETCHNTA."16/32/64 mem8"]
Opcode = "0F 18 /0"
Instruction = "location"

[PREFETCHT0."16/32/64 mem8"]
Opcode = "0F 18 /1"
Instruction = "location"

[PREFETCHT1."16/32/64 mem8"]
Opcode = "0F 18 /2"
Instruction = "location"

[PREFETCHT2."16/32/64 mem8"]
Opcode = "0F 18 /3"
Instruction = "location"

[PUSH."16 reg/mem16"]
Opcode = "FF /6"
Instruction = "src"

[PUSH."32/64 reg/mem16"]
Opcode = "FF /6"
Instruction = "src"
OperandSizeOverride = true

[PUSH."32 reg/mem32"]
Opcode = "FF /6"
Instruction = "src"

[PUSH."64 reg/mem64"]
Opcode = "FF /6"
Instruction = "src"

[PUSH."16 reg16"]
Opcode = "50 +rw"
Instruction = "src"

[PUSH."32/64 reg16"]
Opcode = "50 +rw"
Instruction = "src"
OperandSizeOverride = true

[PUSH."32 reg32"]
Opcode = "50 +rd"
Instruction = "src"

[PUSH."64 reg64"]
Opcode = "50 +rq"
Instruction = "src"

[PUSH."16/32/64 imm8"]
Opcode = "6A ib"
Instruction = "src"

[PUSH."16 imm16"]
Opcode = "68 iw"
Instruction = "src"

[PUSH."32/64 imm16"]
Opcode = "68 iw"
Instruction = "src"
OperandSizeOverride = true

[PUSH."32 imm32"]
Opcode = "68 id"
Instruction = "src"

[PUSH."64 imm64"]
Opcode = "68 iq"
Instruction = "src"

[PUSH."16/32/64 CS"]
Opcode = "0E"
Instruction = "src"

[PUSH."16/32/64 SS"]
Opcode = "16"
Instruction = "src"

[PUSH."16/32/64 DS"]
Opcode = "1E"
Instruction = "src"

[PUSH."16/32/64 ES"]
Opcode = "06"
Instruction = "src"

[PUSH."16/32/64 FS"]
Opcode = "0F A0"
Instruction = "src"

[PUSH."16/32/64 GS"]
Opcode = "0F A8"
Instruction = "src"

[PUSHA."16"]
Opcode = "60"

[PUSHA."32"]
Opcode = "60"
OperandSizeOverride = true

[PUSHAD."32"]
Opcode = "60"

[PUSHF."16"]
Opcode = "9C"

[PUSHF."32/64"]
Opcode = "9C"
OperandSizeOverride = true

[PUSHFD."32"]
Opcode = "9C"

[PUSHFQ."64"]
Opcode = "9C"

[RCL."16/32/64 reg/mem8"]
Opcode = "D0 /2"
Instruction = "src/dest"

[RCL."16/32/64 reg/mem8 CL"]
Opcode = "D2 /2"
Instruction = "src/dest bits"

[RCL."16/32/64 reg/mem8 imm8"]
Opcode = "C0 /2 ib"
Instruction = "src/dest bits"

[RCL."16 reg/mem16"]
Opcode = "D1 /2"
Instruction = "src/dest"

[RCL."32/64 reg/mem16"]
Opcode = "D1 /2"
Instruction = "src/dest"
OperandSizeOverride = true

[RCL."32/64 reg/mem32"]
Opcode = "D1 /2"
Instruction = "src/dest"

[RCL."64 reg/mem64"]
Opcode = "D1 /2"
Instruction = "src/dest"
[.REX]
W = 1

[RCL."16 reg/mem16 CL"]
Opcode = "D3 /2"
Instruction = "src/dest bits"

[RCL."32/64 reg/mem16 CL"]
Opcode = "D3 /2"
Instruction = "src/dest bits"
OperandSizeOverride = true

[RCL."32/64 reg/mem32 CL"]
Opcode = "D3 /2"
Instruction = "src/dest bits"

[RCL."64 reg/mem64 CL"]
Opcode = "D3 /2"
Instruction = "src/dest bits"
[.REX]
W = 1

[RCL."16 reg/mem16 imm8"]
Opcode = "C1 /2 ib"
Instruction = "src/dest bits"

[RCL."32/64 reg/mem16 imm8"]
Opcode = "C1 /2 ib"
Instruction = "src/dest bits"
OperandSizeOverride = true

[RCL."32/64 reg/mem32 imm8"]
Opcode = "C1 /2 ib"
Instruction = "src/dest bits"

[RCL."64 reg/mem64 imm8"]
Opcode = "C1 /2 ib"
Instruction = "src/dest bits"
[.REX]
W = 1

[RCR."16/32/64 reg/mem8"]
Opcode = "D0 /3"
Instruction = "src/dest"

[RCR."16/32/64 reg/mem8 CL"]
Opcode = "D2 /3"
Instruction = "src/dest bits"

[RCR."16/32/64 reg/mem8 imm8"]
Opcode = "C0 /3 ib"
Instruction = "src/dest bits"

[RCR."16 reg/mem16"]
Opcode = "D1 /3"
Instruction = "src/dest"

[RCR."32/64 reg/mem16"]
Opcode = "D1 /3"
Instruction = "src/dest"
OperandSizeOverride = true

[RCR."32/64 reg/mem32"]
Opcode = "D1 /3"
Instruction = "src/dest"

[RCR."64 reg/mem64"]
Opcode = "D1 /3"
Instruction = "src/dest"
[.REX]
W = 1

[RCR."16 reg/mem16 CL"]
Opcode = "D3 /3"
Instruction = "src/dest bits"

[RCR."32/64 reg/mem16 CL"]
Opcode = "D3 /3"
Instruction = "src/dest bits"
OperandSizeOverride = true

[RCR."32/64 reg/mem32 CL"]
Opcode = "D3 /3"
Instruction = "src/dest bits"

[RCR."64 reg/mem64 CL"]
Opcode = "D3 /3"
Instruction = "src/dest bits"
[.REX]
W = 1

[RCR."16 reg/mem16 imm8"]
Opcode = "C1 /3 ib"
Instruction = "src/dest bits"

[RCR."32/64 reg/mem16 imm8"]
Opcode = "C1 /3 ib"
Instruction = "src/dest bits"
OperandSizeOverride = true

[RCR."32/64 reg/mem32 imm8"]
Opcode = "C1 /3 ib"
Instruction = "src/dest bits"

[RCR."64 reg/mem64 imm8"]
Opcode = "C1 /3 ib"
Instruction = "src/dest bits"
[.REX]
W = 1

[RDFSBASE."32/64 reg32"]
Opcode = "0F AE /0"
Instruction = "dest"
Repeat = 1

[RDFSBASE."64 reg64"]
Opcode = "0F AE /0"
Instruction = "dest"
Repeat = 1
[.REX]
W = 1

[RDGSBASE."32/64 reg32"]
Opcode = "0F AE /1"
Instruction = "dest"
Repeat = 1

[RDGSBASE."64 reg64"]
Opcode = "0F AE /1"
Instruction = "dest"
Repeat = 1
[.REX]
W = 1

[RDPID."16/32/64 reg/mem64"]
Opcode = "0F C7 /7"
Repeat = 1

[RDPRU."16/32/64"]
Opcode = "0F 01 FD"

[RDRAND."16 reg16"]
Opcode = "0F C7 /6"
Instruction = "dest"

[RDRAND."32/64 reg16"]
Opcode = "0F C7 /6"
Instruction = "dest"
OperandSizeOverride = true

[RDRAND."32/64 reg32"]
Opcode = "0F C7 /6"
Instruction = "dest"

[RDRAND."64 reg64"]
Opcode = "0F C7 /6"
Instruction = "dest"
[.REX]
W = 1

[RDSEED."16 reg16"]
Opcode = "0F C7 /7"
Instruction = "dest"

[RDSEED."32/64 reg16"]
Opcode = "0F C7 /7"
Instruction = "dest"
OperandSizeOverride = true

[RDSEED."32/64 reg32"]
Opcode = "0F C7 /7"
Instruction = "dest"

[RDSEED."64 reg64"]
Opcode = "0F C7 /7"
Instruction = "dest"
[.REX]
W = 1

[RET."16/32/64"]
Opcode = "C3"

[RET."16/32/64 imm16"]
Opcode = "C2 iw"
Instruction = "size"

[RETF."16/32/64"]
Opcode = "CB"

[RETF."16/32/64 imm16"]
Opcode = "CA iw"
Instruction = "size"

[ROL."16/32/64 reg/mem8"]
Opcode = "D0 /0"
Instruction = "src/dest"

[ROL."16/32/64 reg/mem8 CL"]
Opcode = "D2 /0"
Instruction = "src/dest bits"

[ROL."16/32/64 reg/mem8 imm8"]
Opcode = "C0 /0 ib"
Instruction = "src/dest bits"

[ROL."16 reg/mem16"]
Opcode = "D1 /0"
Instruction = "src/dest"

[ROL."32/64 reg/mem16"]
Opcode = "D1 /0"
Instruction = "src/dest"
OperandSizeOverride = true

[ROL."32/64 reg/mem32"]
Opcode = "D1 /0"
Instruction = "src/dest"

[ROL."64 reg/mem64"]
Opcode = "D1 /0"
Instruction = "src/dest"
[.REX]
W = 1

[ROL."16 reg/mem16 CL"]
Opcode = "D3 /0"
Instruction = "src/dest bits"

[ROL."32/64 reg/mem16 CL"]
Opcode = "D3 /0"
Instruction = "src/dest bits"
OperandSizeOverride = true

[ROL."32/64 reg/mem32 CL"]
Opcode = "D3 /0"
Instruction = "src/dest bits"

[ROL."64 reg/mem64 CL"]
Opcode = "D3 /0"
Instruction = "src/dest bits"
[.REX]
W = 1

[ROL."16 reg/mem16 imm8"]
Opcode = "C1 /0 ib"
Instruction = "src/dest bits"

[ROL."32/64 reg/mem16 imm8"]
Opcode = "C1 /0 ib"
Instruction = "src/dest bits"
OperandSizeOverride = true

[ROL."32/64 reg/mem32 imm8"]
Opcode = "C1 /0 ib"
Instruction = "src/dest bits"

[ROL."64 reg/mem64 imm8"]
Opcode = "C1 /0 ib"
Instruction = "src/dest bits"
[.REX]
W = 1

[ROR."16/32/64 reg/mem8"]
Opcode = "D0 /1"
Instruction = "src/dest"

[ROR."16/32/64 reg/mem8 CL"]
Opcode = "D2 /1"
Instruction = "src/dest bits"

[ROR."16/32/64 reg/mem8 imm8"]
Opcode = "C0 /1 ib"
Instruction = "src/dest bits"

[ROR."16 reg/mem16"]
Opcode = "D1 /1"
Instruction = "src/dest"

[ROR."32/64 reg/mem16"]
Opcode = "D1 /1"
Instruction = "src/dest"
OperandSizeOverride = true

[ROR."32/64 reg/mem32"]
Opcode = "D1 /1"
Instruction = "src/dest"

[ROR."64 reg/mem64"]
Opcode = "D1 /1"
Instruction = "src/dest"
[.REX]
W = 1

[ROR."16 reg/mem16 CL"]
Opcode = "D3 /1"
Instruction = "src/dest bits"

[ROR."32/64 reg/mem16 CL"]
Opcode = "D3 /1"
Instruction = "src/dest bits"
OperandSizeOverride = true

[ROR."32/64 reg/mem32 CL"]
Opcode = "D3 /1"
Instruction = "src/dest bits"

[ROR."64 reg/mem64 CL"]
Opcode = "D3 /1"
Instruction = "src/dest bits"
[.REX]
W = 1

[ROR."16 reg/mem16 imm8"]
Opcode = "C1 /1 ib"
Instruction = "src/dest bits"

[ROR."32/64 reg/mem16 imm8"]
Opcode = "C1 /1 ib"
Instruction = "src/dest bits"
OperandSizeOverride = true

[ROR."32/64 reg/mem32 imm8"]
Opcode = "C1 /1 ib"
Instruction = "src/dest bits"

[ROR."64 reg/mem64 imm8"]
Opcode = "C1 /1 ib"
Instruction = "src/dest bits"
[.REX]
W = 1

[RORX."32/64 reg32 reg/mem32 imm8"]
Opcode = "F0 /r ib"
Instruction = "dest src rot_cnt"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x03
[..WvvvvLpp]
W = 0
vvvv = 0b1111
L = 0
pp = 0b00

[RORX."64 reg64 reg/mem64 imm8"]
Opcode = "F0 /r ib"
Instruction = "dest src rot_cnt"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x03
[..WvvvvLpp]
W = 1
vvvv = 0b1111
L = 0
pp = 0b00

[SAHF."16/32/64"]
Opcode = "9E"

[SAL."16/32/64 reg/mem8"]
Opcode = "D0 /4"
Instruction = "src/dest"

[SAL."16/32/64 reg/mem8 CL"]
Opcode = "D2 /4"
Instruction = "src/dest bits"

[SAL."16/32/64 reg/mem8 imm8"]
Opcode = "C0 /4 ib"
Instruction = "src/dest bits"

[SAL."16 reg/mem16"]
Opcode = "D1 /4"
Instruction = "src/dest"

[SAL."32/64 reg/mem16"]
Opcode = "D1 /4"
Instruction = "src/dest"
OperandSizeOverride = true

[SAL."32/64 reg/mem32"]
Opcode = "D1 /4"
Instruction = "src/dest"

[SAL."64 reg/mem64"]
Opcode = "D1 /4"
Instruction = "src/dest"
[.REX]
W = 1

[SAL."16 reg/mem16 CL"]
Opcode = "D3 /4"
Instruction = "src/dest bits"

[SAL."32/64 reg/mem16 CL"]
Opcode = "D3 /4"
Instruction = "src/dest bits"
OperandSizeOverride = true

[SAL."32/64 reg/mem32 CL"]
Opcode = "D3 /4"
Instruction = "src/dest bits"

[SAL."64 reg/mem64 CL"]
Opcode = "D3 /4"
Instruction = "src/dest bits"
[.REX]
W = 1

[SAL."16 reg/mem16 imm8"]
Opcode = "C1 /4 ib"
Instruction = "src/dest bits"

[SAL."32/64 reg/mem16 imm8"]
Opcode = "C1 /4 ib"
Instruction = "src/dest bits"
OperandSizeOverride = true

[SAL."32/64 reg/mem32 imm8"]
Opcode = "C1 /4 ib"
Instruction = "src/dest bits"

[SAL."64 reg/mem64 imm8"]
Opcode = "C1 /4 ib"
Instruction = "src/dest bits"
[.REX]
W = 1

[SHL."16/32/64 reg/mem8"]
Opcode = "D0 /4"
Instruction = "src/dest"

[SHL."16/32/64 reg/mem8 CL"]
Opcode = "D2 /4"
Instruction = "src/dest bits"

[SHL."16/32/64 reg/mem8 imm8"]
Opcode = "C0 /4 ib"
Instruction = "src/dest bits"

[SHL."16 reg/mem16"]
Opcode = "D1 /4"
Instruction = "src/dest"

[SHL."32/64 reg/mem16"]
Opcode = "D1 /4"
Instruction = "src/dest"
OperandSizeOverride = true

[SHL."32/64 reg/mem32"]
Opcode = "D1 /4"
Instruction = "src/dest"

[SHL."64 reg/mem64"]
Opcode = "D1 /4"
Instruction = "src/dest"
[.REX]
W = 1

[SHL."16 reg/mem16 CL"]
Opcode = "D3 /4"
Instruction = "src/dest bits"

[SHL."32/64 reg/mem16 CL"]
Opcode = "D3 /4"
Instruction = "src/dest bits"
OperandSizeOverride = true

[SHL."32/64 reg/mem32 CL"]
Opcode = "D3 /4"
Instruction = "src/dest bits"

[SHL."64 reg/mem64 CL"]
Opcode = "D3 /4"
Instruction = "src/dest bits"
[.REX]
W = 1

[SHL."16 reg/mem16 imm8"]
Opcode = "C1 /4 ib"
Instruction = "src/dest bits"

[SHL."32/64 reg/mem16 imm8"]
Opcode = "C1 /4 ib"
Instruction = "src/dest bits"
OperandSizeOverride = true

[SHL."32/64 reg/mem32 imm8"]
Opcode = "C1 /4 ib"
Instruction = "src/dest bits"

[SHL."64 reg/mem64 imm8"]
Opcode = "C1 /4 ib"
Instruction = "src/dest bits"
[.REX]
W = 1

[SAR."16/32/64 reg/mem8"]
Opcode = "D0 /7"
Instruction = "src/dest"

[SAR."16/32/64 reg/mem8 CL"]
Opcode = "D2 /7"
Instruction = "src/dest bits"

[SAR."16/32/64 reg/mem8 imm8"]
Opcode = "C0 /7 ib"
Instruction = "src/dest bits"

[SAR."16 reg/mem16"]
Opcode = "D1 /7"
Instruction = "src/dest"

[SAR."32/64 reg/mem16"]
Opcode = "D1 /7"
Instruction = "src/dest"
OperandSizeOverride = true

[SAR."32/64 reg/mem32"]
Opcode = "D1 /7"
Instruction = "src/dest"

[SAR."64 reg/mem64"]
Opcode = "D1 /7"
Instruction = "src/dest"
[.REX]
W = 1

[SAR."16 reg/mem16 CL"]
Opcode = "D3 /7"
Instruction = "src/dest bits"

[SAR."32/64 reg/mem16 CL"]
Opcode = "D3 /7"
Instruction = "src/dest bits"
OperandSizeOverride = true

[SAR."32/64 reg/mem32 CL"]
Opcode = "D3 /7"
Instruction = "src/dest bits"

[SAR."64 reg/mem64 CL"]
Opcode = "D3 /7"
Instruction = "src/dest bits"
[.REX]
W = 1

[SAR."16 reg/mem16 imm8"]
Opcode = "C1 /7 ib"
Instruction = "src/dest bits"

[SAR."32/64 reg/mem16 imm8"]
Opcode = "C1 /7 ib"
Instruction = "src/dest bits"
OperandSizeOverride = true

[SAR."32/64 reg/mem32 imm8"]
Opcode = "C1 /7 ib"
Instruction = "src/dest bits"

[SAR."64 reg/mem64 imm8"]
Opcode = "C1 /7 ib"
Instruction = "src/dest bits"
[.REX]
W = 1

[SARX."32/64 reg32 reg/mem32 reg32"]
Opcode = "F7 /r"
Instruction = "dest src shift_cnt"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "src2"
L = 0
pp = 0b10

[SARX."64 reg64 reg/mem64 reg64"]
Opcode = "F7 /r"
Instruction = "dest src shift_cnt"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "src2"
L = 0
pp = 0b10

[SBB."16/32/64 AL imm8"]
Opcode = "1C ib"
Instruction = "dest src"

[SBB."16 AX imm16"]
Opcode = "1D iw"
Instruction = "dest src"

[SBB."32/64 AX imm16"]
Opcode = "1D iw"
Instruction = "dest src"
OperandSizeOverride = true

[SBB."32/64 EAX imm32"]
Opcode = "1D id"
Instruction = "dest src"

[SBB."64 RAX imm32"]
Opcode = "1D id"
Instruction = "dest src"
[.REX]
W = 1

[SBB."16/32/64 reg/mem8 imm8"]
Opcode = "80 /3 ib"
Instruction = "dest src"

[SBB."16 reg/mem16 imm8"]
Opcode = "83 /3 ib"
Instruction = "dest src"

[SBB."32/64 reg/mem16 imm8"]
Opcode = "83 /3 ib"
Instruction = "dest src"
OperandSizeOverride = true

[SBB."32/64 reg/mem32 imm8"]
Opcode = "83 /3 ib"
Instruction = "dest src"

[SBB."64 reg/mem64 imm8"]
Opcode = "83 /3 ib"
Instruction = "dest src"
[.REX]
W = 1

[SBB."16 reg/mem16 imm16"]
Opcode = "81 /3 iw"
Instruction = "dest src"

[SBB."32/64 reg/mem16 imm16"]
Opcode = "81 /3 iw"
Instruction = "dest src"
OperandSizeOverride = true

[SBB."32/64 reg/mem32 imm32"]
Opcode = "81 /3 id"
Instruction = "dest src"

[SBB."64 reg/mem64 imm32"]
Opcode = "81 /3 id"
Instruction = "dest src"
[.REX]
W = 1

[SBB."16/32/64 reg/mem8 reg8"]
Opcode = "18 /r"
Instruction = "dest src"

[SBB."16 reg/mem16 reg16"]
Opcode = "19 /r"
Instruction = "dest src"

[SBB."32/64 reg/mem16 reg16"]
Opcode = "19 /r"
Instruction = "dest src"
OperandSizeOverride = true

[SBB."32/64 reg/mem32 reg32"]
Opcode = "19 /r"
Instruction = "dest src"

[SBB."64 reg/mem64 reg64"]
Opcode = "19 /r"
Instruction = "dest src"
[.REX]
W = 1

[SBB."16/32/64 reg8 reg/mem8"]
Opcode = "1A /r"
Instruction = "dest src"

[SBB."16 reg16 reg/mem16"]
Opcode = "1B /r"
Instruction = "dest src"

[SBB."32/64 reg16 reg/mem16"]
Opcode = "1B /r"
Instruction = "dest src"
OperandSizeOverride = true

[SBB."32/64 reg32 reg/mem32"]
Opcode = "1B /r"
Instruction = "dest src"

[SBB."64 reg64 reg/mem64"]
Opcode = "1B /r"
Instruction = "dest src"
[.REX]
W = 1

[SCASB."16/32/64"]
Opcode = "AE"

[SCASW."16"]
Opcode = "AF"

[SCASW."32/64"]
Opcode = "AF"
OperandSizeOverride = true

[SCASD."32/64"]
Opcode = "AF"

[SCASQ."64"]
Opcode = "AF"
[.REX]
W = 1

[SETO."16/32/64 reg/mem8"]
Opcode = "0F 90 /0"
Instruction = "dest"

[SETNO."16/32/64 reg/mem8"]
Opcode = "0F 91 /0"
Instruction = "dest"

[SETB."16/32/64 reg/mem8"]
Opcode = "0F 92 /0"
Instruction = "dest"

[SETC."16/32/64 reg/mem8"]
Opcode = "0F 92 /0"
Instruction = "dest"

[SETNAE."16/32/64 reg/mem8"]
Opcode = "0F 92 /0"
Instruction = "dest"

[SETNB."16/32/64 reg/mem8"]
Opcode = "0F 93 /0"
Instruction = "dest"

[SETNC."16/32/64 reg/mem8"]
Opcode = "0F 93 /0"
Instruction = "dest"

[SETAE."16/32/64 reg/mem8"]
Opcode = "0F 93 /0"
Instruction = "dest"

[SETZ."16/32/64 reg/mem8"]
Opcode = "0F 94 /0"
Instruction = "dest"

[SETE."16/32/64 reg/mem8"]
Opcode = "0F 94 /0"
Instruction = "dest"

[SETNZ."16/32/64 reg/mem8"]
Opcode = "0F 95 /0"
Instruction = "dest"

[SETNE."16/32/64 reg/mem8"]
Opcode = "0F 95 /0"
Instruction = "dest"

[SETBE."16/32/64 reg/mem8"]
Opcode = "0F 96 /0"
Instruction = "dest"

[SETNA."16/32/64 reg/mem8"]
Opcode = "0F 96 /0"
Instruction = "dest"

[SETNBE."16/32/64 reg/mem8"]
Opcode = "0F 97 /0"
Instruction = "dest"

[SETA."16/32/64 reg/mem8"]
Opcode = "0F 97 /0"
Instruction = "dest"

[SETS."16/32/64 reg/mem8"]
Opcode = "0F 98 /0"
Instruction = "dest"

[SETNS."16/32/64 reg/mem8"]
Opcode = "0F 99 /0"
Instruction = "dest"

[SETP."16/32/64 reg/mem8"]
Opcode = "0F 9A /0"
Instruction = "dest"

[SETPE."16/32/64 reg/mem8"]
Opcode = "0F 9A /0"
Instruction = "dest"

[SETNP."16/32/64 reg/mem8"]
Opcode = "0F 9B /0"
Instruction = "dest"

[SETPO."16/32/64 reg/mem8"]
Opcode = "0F 9B /0"
Instruction = "dest"

[SETL."16/32/64 reg/mem8"]
Opcode = "0F 9C /0"
Instruction = "dest"

[SETNGE."16/32/64 reg/mem8"]
Opcode = "0F 9C /0"
Instruction = "dest"

[SETNL."16/32/64 reg/mem8"]
Opcode = "0F 9D /0"
Instruction = "dest"

[SETGE."16/32/64 reg/mem8"]
Opcode = "0F 9D /0"
Instruction = "dest"

[SETLE."16/32/64 reg/mem8"]
Opcode = "0F 9E /0"
Instruction = "dest"

[SETNG."16/32/64 reg/mem8"]
Opcode = "0F 9E /0"
Instruction = "dest"

[SETNLE."16/32/64 reg/mem8"]
Opcode = "0F 9F /0"
Instruction = "dest"

[SETG."16/32/64 reg/mem8"]
Opcode = "0F 9F /0"
Instruction = "dest"

[SFENCE."16/32/64"]
Opcode = "0F AE F8"

[SHLD."16 reg/mem16 reg16 imm8"]
Opcode = "0F A4 /r ib"
Instruction = "src/dest shift_ptrn shift_cnt"

[SHLD."32/64 reg/mem16 reg16 imm8"]
Opcode = "0F A4 /r ib"
Instruction = "src/dest shift_ptrn shift_cnt"
OperandSizeOverride = true

[SHLD."32/64 reg/mem32 reg32 imm8"]
Opcode = "0F A4 /r ib"
Instruction = "src/dest shift_ptrn shift_cnt"

[SHLD."64 reg/mem64 reg64 imm8"]
Opcode = "0F A4 /r ib"
Instruction = "src/dest shift_ptrn shift_cnt"
[.REX]
W = 1

[SHLD."16 reg/mem16 reg16 CL"]
Opcode = "0F A5 /r"
Instruction = "src/dest shift_ptrn shift_cnt"

[SHLD."32/64 reg/mem16 reg16 CL"]
Opcode = "0F A5 /r"
Instruction = "src/dest shift_ptrn shift_cnt"
OperandSizeOverride = true

[SHLD."32/64 reg/mem32 reg32 CL"]
Opcode = "0F A5 /r"
Instruction = "src/dest shift_ptrn shift_cnt"

[SHLD."64 reg/mem64 reg64 CL"]
Opcode = "0F A5 /r"
Instruction = "src/dest shift_ptrn shift_cnt"
[.REX]
W = 1

[SHLX."32/64 reg32 reg/mem32 reg32"]
Opcode = "F7 /r"
Instruction = "dest src shift_cnt"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "src2"
L = 0
pp = 0b01

[SHLX."64 reg64 reg/mem64 reg64"]
Opcode = "F7 /r"
Instruction = "dest src shift_cnt"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "src2"
L = 0
pp = 0b01

[SHR."16/32/64 reg/mem8"]
Opcode = "D0 /5"
Instruction = "src/dest"

[SHR."16/32/64 reg/mem8 CL"]
Opcode = "D2 /5"
Instruction = "src/dest shift_cnt"

[SHR."16/32/64 reg/mem8 imm8"]
Opcode = "C0 /5 ib"
Instruction = "src/dest shift_cnt"

[SHR."16 reg/mem16"]
Opcode = "D1 /5"
Instruction = "src/dest"

[SHR."32/64 reg/mem16"]
Opcode = "D1 /5"
Instruction = "src/dest"
OperandSizeOverride = true

[SHR."32/64 reg/mem32"]
Opcode = "D1 /5"
Instruction = "src/dest"

[SHR."64 reg/mem64"]
Opcode = "D1 /5"
Instruction = "src/dest"
[.REX]
W = 1

[SHR."16 reg/mem16 CL"]
Opcode = "D3 /5"
Instruction = "src/dest shift_cnt"

[SHR."32/64 reg/mem16 CL"]
Opcode = "D3 /5"
Instruction = "src/dest shift_cnt"
OperandSizeOverride = true

[SHR."32/64 reg/mem32 CL"]
Opcode = "D3 /5"
Instruction = "src/dest shift_cnt"

[SHR."64 reg/mem64 CL"]
Opcode = "D3 /5"
Instruction = "src/dest shift_cnt"
[.REX]
W = 1

[SHR."16 reg/mem16 imm8"]
Opcode = "C1 /5 ib"
Instruction = "src/dest shift_cnt"

[SHR."32/64 reg/mem16 imm8"]
Opcode = "C1 /5 ib"
Instruction = "src/dest shift_cnt"
OperandSizeOverride = true

[SHR."32/64 reg/mem32 imm8"]
Opcode = "C1 /5 ib"
Instruction = "src/dest shift_cnt"

[SHR."64 reg/mem64 imm8"]
Opcode = "C1 /5 ib"
Instruction = "src/dest shift_cnt"
[.REX]
W = 1

[SHRD."16 reg/mem16 reg16 imm8"]
Opcode = "0F AC /r ib"
Instruction = "src/dest shift_ptrn shift_cnt"

[SHRD."32/64 reg/mem16 reg16 imm8"]
Opcode = "0F AC /r ib"
Instruction = "src/dest shift_ptrn shift_cnt"
OperandSizeOverride = true

[SHRD."32/64 reg/mem32 reg32 imm8"]
Opcode = "0F AC /r ib"
Instruction = "src/dest shift_ptrn shift_cnt"

[SHRD."64 reg/mem64 reg64 imm8"]
Opcode = "0F AC /r ib"
Instruction = "src/dest shift_ptrn shift_cnt"
[.REX]
W = 1

[SHRD."16 reg/mem16 reg16 CL"]
Opcode = "0F AD /r"
Instruction = "src/dest shift_ptrn shift_cnt"

[SHRD."32/64 reg/mem16 reg16 CL"]
Opcode = "0F AD /r"
Instruction = "src/dest shift_ptrn shift_cnt"
OperandSizeOverride = true

[SHRD."32/64 reg/mem32 reg32 CL"]
Opcode = "0F AD /r ib"
Instruction = "src/dest shift_ptrn shift_cnt"

[SHRD."64 reg/mem64 reg64 CL"]
Opcode = "0F AD /r ib"
Instruction = "src/dest shift_ptrn shift_cnt"
[.REX]
W = 1

[SHRX."32/64 reg32 reg/mem32 reg32"]
Opcode = "F7 /r"
Instruction = "dest src shift_cnt"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 0
vvvv = "src2"
L = 0
pp = 0b11

[SHRX."64 reg64 reg/mem64 reg64"]
Opcode = "F7 /r"
Instruction = "dest src shift_cnt"
VEX = 0xC4
[.RXBmap_select]
map_select = 0x02
[..WvvvvLpp]
W = 1
vvvv = "src2"
L = 0
pp = 0b11

[SLWPCB."32/64 reg32"]
Opcode = "12 /1"
Instruction = "dest"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 0
vvvv = 0b1111
L = 0
pp = 0

[SLWPCB."64 reg64"]
Opcode = "12 /1"
Instruction = "dest"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 1
vvvv = 0b1111
L = 0
pp = 0

[STC."16/32/64"]
Opcode = "F9"

[STD."16/32/64"]
Opcode = "FD"

[STOSB."16/32/64"]
Opcode = "AA"

[STOSW."16"]
Opcode = "AB"

[STOSW."32/64"]
Opcode = "AB"
OperandSizeOverride = true

[STOSD."32/64"]
Opcode = "AB"

[STOSQ."64"]
Opcode = "AB"
[.REX]
W = 1

[SUB."16/32/64 AL imm8"]
Opcode = "2C ib"
Instruction = "dest src"

[SUB."16 AX imm16"]
Opcode = "2D iw"
Instruction = "dest src"

[SUB."32/64 AX imm16"]
Opcode = "2D iw"
Instruction = "dest src"
OperandSizeOverride = true

[SUB."32/64 EAX imm32"]
Opcode = "2D id"
Instruction = "dest src"

[SUB."64 RAX imm32"]
Opcode = "2D id"
Instruction = "dest src"
[.REX]
W = 1

[SUB."16/32/64 reg/mem8 imm8"]
Opcode = "80 /5 ib"
Instruction = "dest src"

[SUB."16 reg/mem16 imm8"]
Opcode = "83 /5 ib"
Instruction = "dest src"

[SUB."32/64 reg/mem16 imm8"]
Opcode = "83 /5 ib"
Instruction = "dest src"
OperandSizeOverride = true

[SUB."32/64 reg/mem32 imm8"]
Opcode = "83 /5 ib"
Instruction = "dest src"

[SUB."64 reg/mem64 imm8"]
Opcode = "83 /5 ib"
Instruction = "dest src"
[.REX]
W = 1

[SUB."16 reg/mem16 imm16"]
Opcode = "81 /5 iw"
Instruction = "dest src"

[SUB."32/64 reg/mem16 imm16"]
Opcode = "81 /5 iw"
Instruction = "dest src"
OperandSizeOverride = true

[SUB."32/64 reg/mem32 imm32"]
Opcode = "81 /5 id"
Instruction = "dest src"

[SUB."64 reg/mem64 imm32"]
Opcode = "81 /5 id"
Instruction = "dest src"
[.REX]
W = 1

[SUB."16/32/64 reg/mem8 reg8"]
Opcode = "28 /r"
Instruction = "dest src"

[SUB."16 reg/mem16 reg16"]
Opcode = "29 /r"
Instruction = "dest src"

[SUB."32/64 reg/mem16 reg16"]
Opcode = "29 /r"
Instruction = "dest src"
OperandSizeOverride = true

[SUB."32/64 reg/mem32 reg32"]
Opcode = "29 /r"
Instruction = "dest src"

[SUB."64 reg/mem64 reg64"]
Opcode = "29 /r"
Instruction = "dest src"
[.REX]
W = 1

[SUB."16/32/64 reg8 reg/mem8"]
Opcode = "2A /r"
Instruction = "dest src"

[SUB."16 reg16 reg/mem16"]
Opcode = "2B /r"
Instruction = "dest src"

[SUB."32/64 reg16 reg/mem16"]
Opcode = "2B /r"
Instruction = "dest src"
OperandSizeOverride = true

[SUB."32/64 reg32 reg/mem32"]
Opcode = "2B /r"
Instruction = "dest src"

[SUB."64 reg64 reg/mem64"]
Opcode = "2B /r"
Instruction = "dest src"
[.REX]
W = 1

[T1MSKC."32/64 reg32 reg/mem32"]
Opcode = "01 /7"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[.WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
pp = 0

[T1MSKC."64 reg64 reg/mem64"]
Opcode = "01 /7"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[.WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
pp = 0

[TEST."16/32/64 AL imm8"]
Opcode = "A8 ib"
Instruction = "src1 src2"

[TEST."16 AX imm16"]
Opcode = "A9 iw"
Instruction = "src1 src2"

[TEST."32/64 AX imm16"]
Opcode = "A9 iw"
Instruction = "src1 src2"
OperandSizeOverride = true

[TEST."32/64 EAX imm32"]
Opcode = "A9 id"
Instruction = "src1 src2"

[TEST."64 RAX imm32"]
Opcode = "A9 id"
Instruction = "src1 src2"
[.REX]
W = 1

[TEST."16/32/64 reg/mem8 imm8"]
Opcode = "F6 /0 ib"
Instruction = "src1 src2"

[TEST."16 reg/mem16 imm16"]
Opcode = "F7 /0 iw"
Instruction = "src1 src2"

[TEST."32/64 reg/mem16 imm16"]
Opcode = "F7 /0 iw"
Instruction = "src1 src2"
OperandSizeOverride = true

[TEST."32/64 reg/mem32 imm32"]
Opcode = "F7 /0 id"
Instruction = "src1 src2"

[TEST."64 reg/mem64 imm32"]
Opcode = "F7 /0 id"
Instruction = "src1 src2"
[.REX]
W = 1

[TEST."16/32/64 reg/mem8 reg8"]
Opcode = "84 /r"
Instruction = "src1 src2"

[TEST."16 reg/mem16 reg16"]
Opcode = "85 /r"
Instruction = "src1 src2"

[TEST."32/64 reg/mem16 reg16"]
Opcode = "85 /r"
Instruction = "src1 src2"
OperandSizeOverride = true

[TEST."32/64 reg/mem32 reg32"]
Opcode = "85 /r"
Instruction = "src1 src2"

[TEST."64 reg/mem64 reg64"]
Opcode = "85 /r"
Instruction = "src1 src2"
[.REX]
W = 1

[TZCNT."16 reg16 reg/mem16"]
Opcode = "0F BC /r"
Instruction = "dest src"
Repeat = 1

[TZCNT."32/64 reg16 reg/mem16"]
Opcode = "0F BC /r"
Instruction = "dest src"
OperandSizeOverride = true
Repeat = 1

[TZCNT."32/64 reg32 reg/mem32"]
Opcode = "0F BC /r"
Instruction = "dest src"
Repeat = 1

[TZCNT."64 reg64 reg/mem64"]
Opcode = "0F BC /r"
Instruction = "dest src"
Repeat = 1
[.REX]
W = 1

[TZMSK."32/64 reg32 reg/mem32"]
Opcode = "01 /4"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 0
vvvv = "dest"
L = 0
p = 0

[TZMSK."64 reg64 reg/mem64"]
Opcode = "01 /4"
Instruction = "dest src"
XOP = true
[.RXBmap_select]
map_select = 0x09
[..WvvvvLpp]
W = 1
vvvv = "dest"
L = 0
p = 0

[UD0."16/32/64"]
Opcode = "0F FF"

[UD1."16 reg/mem16"]
Opcode = "0F B9 /r"
Instruction = "idk"

[UD1."32/64 reg/mem16"]
Opcode = "0F B9 /r"
Instruction = "idk"
OperandSizeOverride = true

[UD1."32/64 reg/mem32"]
Opcode = "0F B9 /r"
Instruction = "idk"

[UD1."64 reg/mem64"]
Opcode = "0F B9 /r"
Instruction = "idk"
[.REX]
W = 1

[UD2."16/32/64"]
Opcode = "0F 0B"

[WRFSBASE."32/64 reg32"]
Opcode = "0F AE /2"
Instruction = "src"
Repeat = 1

[WRFSBASE."64 reg64"]
Opcode = "0F AE /2"
Instruction = "src"
Repeat = 1
[.REX]
W = 1

[WRGSBASE."32/64 reg32"]
Opcode = "0F AE /3"
Instruction = "src"
Repeat = 1

[WRGSBASE."64 reg64"]
Opcode = "0F AE /3"
Instruction = "src"
Repeat = 1
[.REX]
W = 1

[XADD."16/32/64 reg/mem8 reg8"]
Opcode = "0F C0 /r"
Instruction = "dest src"

[XADD."16 reg/mem16 reg16"]
Opcode = "0F C1 /r"
Instruction = "dest src"

[XADD."32/64 reg/mem16 reg16"]
Opcode = "0F C1 /r"
Instruction = "dest src"
OperandSizeOverride = true

[XADD."32/64 reg/mem32 reg32"]
Opcode = "0F C1 /r"
Instruction = "dest src"

[XADD."64 reg/mem64 reg64"]
Opcode = "0F C1 /r"
Instruction = "dest src"
[.REX]
W = 1

[XCHG."16 AX reg16"]
Opcode = "90 +rw"
Instruction = "src1 src2"

[XCHG."16 reg16 AX"]
Opcode = "90 +rw"
Instruction = "src1 src2"

[XCHG."32/64 AX reg16"]
Opcode = "90 +rw"
Instruction = "src1 src2"
OperandSizeOverride = true

[XCHG."32/64 reg16 AX"]
Opcode = "90 +rw"
Instruction = "src1 src2"
OperandSizeOverride = true

[XCHG."32/64 EAX reg32"]
Opcode = "90 +rd"
Instruction = "src1 src2"

[XCHG."32/64 reg32 EAX"]
Opcode = "90 +rd"
Instruction = "src1 src2"

[XCHG."64 RAX reg64"]
Opcode = "90 +rq"
Instruction = "src1 src2"
[.REX]
W = 1

[XCHG."64 reg64 RAX"]
Opcode = "90 +rq"
Instruction = "src1 src2"
[.REX]
W = 1

[XCHG."16/32/64 reg/mem8 reg8"]
Opcode = "86 /r"
Instruction = "src1 src2"

[XCHG."16/32/64 reg8 reg/mem8"]
Opcode = "86 /r"
Instruction = "src1 src2"

[XCHG."16 reg/mem16 reg16"]
Opcode = "87 /r"
Instruction = "src1 src2"

[XCHG."16 reg16 reg/mem16"]
Opcode = "87 /r"
Instruction = "src1 src2"

[XCHG."32/64 reg/mem16 reg16"]
Opcode = "87 /r"
Instruction = "src1 src2"
OperandSizeOverride = true

[XCHG."32/64 reg16 reg/mem16"]
Opcode = "87 /r"
Instruction = "src1 src2"
OperandSizeOverride = true

[XCHG."32/64 reg/mem32 reg32"]
Opcode = "87 /r"
Instruction = "src1 src2"

[XCHG."32/64 reg32 reg/mem32"]
Opcode = "87 /r"
Instruction = "src1 src2"

[XCHG."64 reg/mem64 reg64"]
Opcode = "87 /r"
Instruction = "src1 src2"
[.REX]
W = 1

[XCHG."64 reg64 reg/mem64"]
Opcode = "87 /r"
Instruction = "src1 src2"
[.REX]
W = 1

[XLATB."16/32/64"]
Opcode = "D7"

[XOR."16/32/64 AL imm8"]
Opcode = "34 ib"
Instruction = "dest src"

[XOR."16 AX imm16"]
Opcode = "35 iw"
Instruction = "dest src"

[XOR."32/64 AX imm16"]
Opcode = "35 iw"
Instruction = "dest src"
OperandSizeOverride = true

[XOR."32/64 EAX imm32"]
Opcode = "35 id"
Instruction = "dest src"

[XOR."64 RAX imm32"]
Opcode = "35 id"
Instruction = "dest src"
[.REX]
W = 1

[XOR."16/32/64 reg/mem8 imm8"]
Opcode = "80 /6 ib"
Instruction = "dest src"

[XOR."16 reg/mem16 imm8"]
Opcode = "83 /6 ib"
Instruction = "dest src"

[XOR."32/64 reg/mem16 imm8"]
Opcode = "83 /6 ib"
Instruction = "dest src"
OperandSizeOverride = true

[XOR."32/64 reg/mem32 imm8"]
Opcode = "83 /6 ib"
Instruction = "dest src"

[XOR."64 reg/mem64 imm8"]
Opcode = "83 /6 ib"
Instruction = "dest src"
[.REX]
W = 1

[XOR."16 reg/mem16 imm16"]
Opcode = "81 /6 iw"
Instruction = "dest src"

[XOR."32/64 reg/mem16 imm16"]
Opcode = "81 /6 iw"
Instruction = "dest src"
OperandSizeOverride = true

[XOR."32/64 reg/mem32 imm32"]
Opcode = "81 /6 id"
Instruction = "dest src"

[XOR."64 reg/mem64 imm32"]
Opcode = "81 /6 id"
Instruction = "dest src"
[.REX]
W = 1

[XOR."16/32/64 reg/mem8 reg8"]
Opcode = "30 /r"
Instruction = "dest src"

[XOR."16 reg/mem16 reg16"]
Opcode = "31 /r"
Instruction = "dest src"

[XOR."32/64 reg/mem16 reg16"]
Opcode = "31 /r"
Instruction = "dest src"
OperandSizeOverride = true

[XOR."32/64 reg/mem32 reg32"]
Opcode = "31 /r"
Instruction = "dest src"

[XOR."64 reg/mem64 reg64"]
Opcode = "31 /r"
Instruction = "dest src"
[.REX]
W = 1

[XOR."16/32/64 reg8 reg/mem8"]
Opcode = "32 /r"
Instruction = "dest src"

[XOR."16 reg16 reg/mem16"]
Opcode = "33 /r"
Instruction = "dest src"

[XOR."32/64 reg16 reg/mem16"]
Opcode = "33 /r"
Instruction = "dest src"
OperandSizeOverride = true

[XOR."32/64 reg32 reg/mem32"]
Opcode = "33 /r"
Instruction = "dest src"

[XOR."64 reg64 reg/mem64"]
Opcode = "33 /r"
Instruction = "dest src"
[.REX]
W = 1